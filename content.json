{"meta":{"title":"张君韵","subtitle":"张君韵の博客","description":"本科 | 计算机科学与技术 | 嵌入式","author":"张君韵","url":"https://tqoqt.github.io","root":"/"},"pages":[{"title":"","date":"2021-08-24T17:07:11.998Z","updated":"2021-06-13T05:55:39.000Z","comments":true,"path":"baidu_verify_xxxxxxx.html","permalink":"https://tqoqt.github.io/baidu_verify_xxxxxxx.html","excerpt":"","text":"wvlc3L96QK"},{"title":"404","date":"2019-08-10T08:41:10.000Z","updated":"2021-06-13T05:55:39.000Z","comments":true,"path":"404.html","permalink":"https://tqoqt.github.io/404.html","excerpt":"","text":""},{"title":"","date":"2021-08-24T17:07:12.002Z","updated":"2021-06-13T05:55:39.000Z","comments":true,"path":"google1xxxxxxx0.html","permalink":"https://tqoqt.github.io/google1xxxxxxx0.html","excerpt":"","text":"google-site-verification: google110e5e5e14c8dcf0.html"},{"title":"放松一下","date":"2019-08-10T08:41:10.000Z","updated":"2021-06-13T05:55:39.000Z","comments":true,"path":"List/index.html","permalink":"https://tqoqt.github.io/List/index.html","excerpt":"","text":"影音资源共享"},{"title":"about","date":"2019-10-24T16:00:00.000Z","updated":"2021-06-13T05:55:39.000Z","comments":true,"path":"about/index.html","permalink":"https://tqoqt.github.io/about/index.html","excerpt":"","text":""},{"title":"archives","date":"2019-10-24T16:00:00.000Z","updated":"2021-06-13T05:55:39.000Z","comments":true,"path":"archives/index.html","permalink":"https://tqoqt.github.io/archives/index.html","excerpt":"","text":""},{"title":"留言板","date":"2019-10-24T16:00:00.000Z","updated":"2021-06-13T05:55:39.000Z","comments":true,"path":"contact/index.html","permalink":"https://tqoqt.github.io/contact/index.html","excerpt":"","text":"畅所欲言 在这里可以留下你的足迹，欢迎在下方留言，欢迎交换友链，一起交流学习！ 友链 Luckeyの友链信息 博客名称: Luckeyの博客 博客网址: http://www.luckyzmj.cn 博客头像: https://s1.ax1x.com/2020/05/17/YRWsYT.png 博客介绍: The harder you work, the luckier you will be"},{"title":"统计","date":"2020-10-31T02:11:28.000Z","updated":"2021-06-13T05:55:39.000Z","comments":true,"path":"census/index.html","permalink":"https://tqoqt.github.io/census/index.html","excerpt":"","text":""},{"title":"categories","date":"2019-10-24T16:00:00.000Z","updated":"2021-06-13T05:55:39.000Z","comments":true,"path":"categories/index.html","permalink":"https://tqoqt.github.io/categories/index.html","excerpt":"","text":""},{"title":"tags","date":"2019-07-19T08:40:27.000Z","updated":"2021-06-13T05:55:39.000Z","comments":true,"path":"tags/index.html","permalink":"https://tqoqt.github.io/tags/index.html","excerpt":"","text":""},{"title":"相册","date":"2021-08-24T17:07:11.890Z","updated":"2021-06-13T05:55:39.000Z","comments":true,"path":"List/galleries/index.html","permalink":"https://tqoqt.github.io/List/galleries/index.html","excerpt":"","text":""},{"title":"友链","date":"2019-07-19T08:42:10.000Z","updated":"2021-06-13T05:55:39.000Z","comments":true,"path":"friends/index.html","permalink":"https://tqoqt.github.io/friends/index.html","excerpt":"","text":""},{"title":"资源分享","date":"2019-07-19T08:40:27.000Z","updated":"2021-06-13T05:55:39.000Z","comments":true,"path":"resource/index.html","permalink":"https://tqoqt.github.io/resource/index.html","excerpt":"","text":""},{"title":"视频","date":"2019-08-10T08:41:10.000Z","updated":"2021-06-13T05:55:39.000Z","comments":true,"path":"List/movies/index.html","permalink":"https://tqoqt.github.io/List/movies/index.html","excerpt":"","text":""},{"title":"听听音乐","date":"2019-07-19T08:40:27.000Z","updated":"2021-06-13T05:55:39.000Z","comments":true,"path":"List/music/index.html","permalink":"https://tqoqt.github.io/List/music/index.html","excerpt":"","text":""},{"title":"乖巧小狗","date":"2021-08-24T17:07:11.891Z","updated":"2021-06-13T05:55:39.000Z","comments":true,"path":"List/galleries/乖巧小狗/index.html","permalink":"https://tqoqt.github.io/List/galleries/%E4%B9%96%E5%B7%A7%E5%B0%8F%E7%8B%97/index.html","excerpt":"","text":""},{"title":"听听音乐","date":"2019-07-19T08:40:27.000Z","updated":"2021-06-13T05:55:39.000Z","comments":true,"path":"List/tools/index.html","permalink":"https://tqoqt.github.io/List/tools/index.html","excerpt":"","text":""},{"title":"二次元风","date":"2021-08-24T17:07:11.891Z","updated":"2021-06-13T05:55:39.000Z","comments":true,"path":"List/galleries/二次元风/index.html","permalink":"https://tqoqt.github.io/List/galleries/%E4%BA%8C%E6%AC%A1%E5%85%83%E9%A3%8E/index.html","excerpt":"","text":""},{"title":"动漫人物","date":"2021-08-24T17:07:11.892Z","updated":"2021-06-13T05:55:39.000Z","comments":true,"path":"List/galleries/动漫人物/index.html","permalink":"https://tqoqt.github.io/List/galleries/%E5%8A%A8%E6%BC%AB%E4%BA%BA%E7%89%A9/index.html","excerpt":"","text":""},{"title":"动漫风景","date":"2021-08-24T17:07:11.893Z","updated":"2021-06-13T05:55:39.000Z","comments":true,"path":"List/galleries/动漫风景/index.html","permalink":"https://tqoqt.github.io/List/galleries/%E5%8A%A8%E6%BC%AB%E9%A3%8E%E6%99%AF/index.html","excerpt":"","text":""},{"title":"呆萌猫咪","date":"2021-08-24T17:07:11.894Z","updated":"2021-06-13T05:55:39.000Z","comments":true,"path":"List/galleries/呆萌猫咪/index.html","permalink":"https://tqoqt.github.io/List/galleries/%E5%91%86%E8%90%8C%E7%8C%AB%E5%92%AA/index.html","excerpt":"","text":""},{"title":"城市风光","date":"2021-08-24T17:07:11.895Z","updated":"2021-06-13T05:55:39.000Z","comments":true,"path":"List/galleries/城市风光/index.html","permalink":"https://tqoqt.github.io/List/galleries/%E5%9F%8E%E5%B8%82%E9%A3%8E%E5%85%89/index.html","excerpt":"","text":""},{"title":"动漫插画","date":"2021-08-24T17:07:11.893Z","updated":"2021-06-13T05:55:39.000Z","comments":true,"path":"List/galleries/动漫插画/index.html","permalink":"https://tqoqt.github.io/List/galleries/%E5%8A%A8%E6%BC%AB%E6%8F%92%E7%94%BB/index.html","excerpt":"","text":""},{"title":"炫酷跑车","date":"2021-08-24T17:07:11.897Z","updated":"2021-06-13T05:55:39.000Z","comments":true,"path":"List/galleries/炫酷跑车/index.html","permalink":"https://tqoqt.github.io/List/galleries/%E7%82%AB%E9%85%B7%E8%B7%91%E8%BD%A6/index.html","excerpt":"","text":""},{"title":"璀璨星空","date":"2021-08-24T17:07:11.897Z","updated":"2021-06-13T05:55:39.000Z","comments":true,"path":"List/galleries/璀璨星空/index.html","permalink":"https://tqoqt.github.io/List/galleries/%E7%92%80%E7%92%A8%E6%98%9F%E7%A9%BA/index.html","excerpt":"","text":""},{"title":"甜美食品","date":"2021-08-24T17:07:11.898Z","updated":"2021-06-13T05:55:39.000Z","comments":true,"path":"List/galleries/甜美食品/index.html","permalink":"https://tqoqt.github.io/List/galleries/%E7%94%9C%E7%BE%8E%E9%A3%9F%E5%93%81/index.html","excerpt":"","text":""},{"title":"清新花卉","date":"2021-08-24T17:07:11.895Z","updated":"2021-06-13T05:55:39.000Z","comments":true,"path":"List/galleries/清新花卉/index.html","permalink":"https://tqoqt.github.io/List/galleries/%E6%B8%85%E6%96%B0%E8%8A%B1%E5%8D%89/index.html","excerpt":"","text":""},{"title":"自然风景","date":"2021-08-24T17:07:11.899Z","updated":"2021-06-13T05:55:39.000Z","comments":true,"path":"List/galleries/自然风景/index.html","permalink":"https://tqoqt.github.io/List/galleries/%E8%87%AA%E7%84%B6%E9%A3%8E%E6%99%AF/index.html","excerpt":"","text":""},{"title":"tags","date":"2021-09-07T15:34:34.000Z","updated":"2021-09-07T15:35:06.206Z","comments":true,"path":"tags/index-1.html","permalink":"https://tqoqt.github.io/tags/index-1.html","excerpt":"","text":""},{"title":"个人博客","date":"2021-09-06T15:00:00.000Z","updated":"2021-10-07T16:15:00.544Z","comments":true,"path":"个人介绍.html","permalink":"https://tqoqt.github.io/%E4%B8%AA%E4%BA%BA%E4%BB%8B%E7%BB%8D.html","excerpt":"","text":"前言这是记录自己的小生活吧 1、前往深圳日 8月15日：第一次做火车啦，开往深圳的第一步，还对于火车很是好奇的，只记得小时候前往梅州过一次，第一次踏出离开赣州的第一步。 8月16日：到达深圳龙华区在福州那边蹭吃蹭喝，去了在光明区的振源电气一般般太偏了，最后决定不去，还是去了优创亿。 8月17日：去了优创亿报道，正式上班了 8月18日：搬家了，搬到固戍这边了，离地铁超近，但高兴的太早，第二天的排队吓到我了 8月19日：晚上发现带来的698元就快花完了，找老爸要了一波给了500，感觉家里还是很难的。 8月20日：乡下的孩子第一次看海了 8月28日：去了华强北一趟，感受了一波繁华，买了个耳机，感觉被骗了还是没抵住诱惑 老妈打电话过来了问了一下过的咋样，感觉难受 9月03日:被瓜皮气到难受，聊到了高中同学，讲到了邱四狗，结果第二天就突然发消息来了，吓人。 9月05日：儿砸闹分手了，连夜飞抵南昌，啧啧啧，半月工资没了，恋爱太费钱，又是恐爱的一天，找到一张老图。 也不知这个四狗居然这么能保存，应该是当初和化学老师哪里偷拍的，这个不孝女。 9月06日：正式开始记录自己生活啦，搞好了Picgo了，✌ 9月07日记录第一天，看开了，这个班也就那样，要培训就培训呗，就这样，该划水划水，你布置任务就卡着点完成呗。 9月15日 ​ 空了好久没记录了，今天突然杨工突然说给我争取到6.5K了，跑什么路，给钱就是大爷啊。 发现听歌也挺久了，嘻嘻嘻。最近喜欢白山茶啊，不能去想了，女人只会影响敲代码的速度。 9月20日去红树林看海和晚霞了，是真不错啊 9月26日开始玩花的啦，嘻嘻嘻 10月1日回家真的难啊，盒饭25，难吃还巨贵 10月3日","author":"张君韵"}],"posts":[{"title":"","slug":"代码规范","date":"2021-10-26T16:00:00.000Z","updated":"2021-10-27T09:19:17.608Z","comments":true,"path":"posts/dai-ma-gui-fan.html","link":"","permalink":"https://tqoqt.github.io/posts/dai-ma-gui-fan.html","excerpt":"","text":"代码规范1、总体原则 简洁明了 清晰 和原有风格保持一致 2、头文件 头文件职责单一，切忌依赖复杂：如不能包含过多头文件 每一个C文件应有一个同名的H文件，用于声明需对外公开的接口 禁止头文件循环依赖，只能是单向依赖 禁止包含用不到的头文件 头文件应当自包含，不需要别的头文件才能编译 禁止在头文件中定义变量 只能通过包含头文件的方式使用其他C文件提供的接口，禁止在C文件中通过extern的方式使用外部函数接口、变量 禁止在extern “C”中包含头文件 3、函数 一个函数仅完成一个功能 重复代码应该尽可能提炼成函数 函数避免过长 函数代码嵌套过深（尽量不超过四层） 可重入函数（可能被多个任务并发调用的函数）避免使用共享变量；如需使用，则应通过互斥手段（关中断、信号量）对其加以保护 设计高扇入，合理扇出的函数（小于七）：扇出指一个函数直接调用（控制）其他函数的数目，扇入指有多少上级函数调用它 函数应避免使用全局变量、静态局部变量和I/O操作，不可避免的地方集中操作 函数的参数个数不超过5个 4、标识符命名与定义 标识符命名要清晰明了、尽量使用完整的单词或大家都能理解的缩写 除常用通用的缩写外，不得使用单词缩写和汉语拼音，尤其拼音缩写 命名风格内部要保持一致 用反义词命名具有互斥意义的变量或相反动作的函数 尽量避免名字中出现数字编号 标识符前不添加模块、项目、产品、部门等名称作为前缀 由于不同系统对文件名大小写处理会不同，所以代码文件命名建议统一采用全小写字母命名 除头文件或编译开关等特殊标识定义，宏定义不能使用下划线开头或结尾 5、变量 一个变量只能有一个功能，不能把一个变量用作多种用途 不用或少用全局变量 局部变量与全局变量不要同名 严禁使用未经初始化的变量作为右值 尽量减少没有必要的数据类型默认转换与强制转换 6、宏、常量 用宏定义表达式时，要使用完备的括号 使用宏时，不允许参数发生变化 除非必要，应尽可能使用函数代替宏 常量建议使用const定义代替宏 #define ASPECT_RATIO 1.653 编译器会永远也看不到ASPECT_RATIO这个符号名，因为在源码进入编译器之前，它会被预处理程序去掉，于是ASPECT_RATIO不会加入到符号列表中。如果涉及到这个常量的代码在编译时报错，就会很令人费解，因为报错信息指的是1.653，而不是ASPECT_RATIO。如果ASPECT_RATIO不是在你自己写的头文件中定义的，你就会奇怪1.653是从哪里来的，甚至会花时间跟踪下去。这个问题也会出现在符号调试器中，因为同样地，你所写的符号名不会出现在符号列表中。解决这个问题的方案很简单：不用预处理宏，定义一个常量： const double ASPECT_RATIO = 1.653; 这种方法很有效，但有两个特殊情况要注意。首先，定义指针常量时会有点不同。因为常量定义一般是放在头文件中（许多源文件会包含它），除了指针所指的类型要定义成const外，重要的是指针也经常要定义成const。例如，要在头文件中定义一个基于char*的字符串常量，你要写两次const： const char * const authorName = \"Scott Meyers\"; 宏定义中尽量不使用return、goto、continue、break等改变程序流程的语句 6、表达式 函数调用不要作为另一个函数的参数使用，否则对于代码的调试、阅读都不利 赋值语句不要写在if等语句中，或作为函数的参数使用 因为if语句中，会根据条件依次判断，如果前一个条件已经可以判定整个条件，则后续条件语句不会再运行，所以可能导致期望的部分赋值没有得到运行。 用括号明确表达式的操作顺序，避免过分依赖默认优先级 7、注释 注释内容要清晰明了、含义准确，防止代码二义性 注释解释代码难以直接表达的意图，而不是重复描述代码 修改代码时，维护代码周边的所有注释，保持注释代码的一致性 文件头部应注释，注释必须列出：版权、版本号、生成日期、作者姓名、内容、功能说明、和其他文件的关系、修改日志 函数声明注释要描述函数的功能、性能及用法、输入和输出参数、函数返回值、可重入的要求 注释应放在代码上方或右方、不可放在下面，放在上方要和其上方代码用空行隔开 对于switch语句下的case语句，如果因为特殊情况需要处理完一个case后进入下一个case处理，必须在该case语句处理完、下一个case语句前加上明确的注释 注释中避免使用缩写 严禁在一行代码或表达式的中间插入注释 8、排版与格式 相对独立的程序块之间、变量说明之后必须加空行 多个短语局不允许写在同一行 if、for、do、while、case、switch、default等语句独占一行 操作符之间看情况加空格 逗号“，”封号“；”只在后面加空格 比较操作符，赋值操作符“=”、“+=”，算数操作符“+”，“%”，逻辑操作符“&amp;&amp;”、“&amp;”，位域操作符“&lt;&lt;”、“^”等双目操作符的前后加空格 “!”、”~”、”++”、”–”、“&amp;”等单目操作符前后不加空格 “-&gt;”、“.”前后不加空格 if、for、while、switch等与后面的括号间应加空格，师关键字更为突出、明显 注释符（包括/**/、//）与注释内容之间要用一个空格进行分隔 源程序中关系较为紧密的代码应尽可能相邻","categories":[{"name":"学习篇","slug":"学习篇","permalink":"https://tqoqt.github.io/categories/%E5%AD%A6%E4%B9%A0%E7%AF%87/"}],"tags":[{"name":"代码规范","slug":"代码规范","permalink":"https://tqoqt.github.io/tags/%E4%BB%A3%E7%A0%81%E8%A7%84%E8%8C%83/"}],"author":"张君韵"},{"title":"","slug":"github访问慢","date":"2021-10-25T16:00:00.000Z","updated":"2021-10-27T11:24:16.196Z","comments":true,"path":"posts/github.html","link":"","permalink":"https://tqoqt.github.io/posts/github.html","excerpt":"","text":"github访问解决方法1、以管理员身份运行命令提示符 优化方法：绕过DNS解析，直接在**本地绑定host 2、在站长工具查询GitHub.com选择TTL值小的ＩＰ地址 ３、打开本地电脑的C:\\Windows\\System32\\drivers\\etc目录，找到ｈｏｓｔｓ文件４、文本工具在最后面打开ｈｏｓｔｓ文件在最后一行添加查询到的IP地址 ５、再在命令提示符中ｐｉｎｇ GitHub．ｃｏｍ 成功则会显示如此 最后网页打开速度会提高","categories":[{"name":"技巧篇","slug":"技巧篇","permalink":"https://tqoqt.github.io/categories/%E6%8A%80%E5%B7%A7%E7%AF%87/"}],"tags":[{"name":"GitHub","slug":"GitHub","permalink":"https://tqoqt.github.io/tags/GitHub/"}],"author":"张君韵"},{"title":"RT_Thread","slug":"操作系统","date":"2021-09-07T16:00:00.000Z","updated":"2021-10-27T12:17:24.848Z","comments":true,"path":"posts/rtt1.html","link":"","permalink":"https://tqoqt.github.io/posts/rtt1.html","excerpt":"","text":"前言 学习RT_Thread一定要坚持下去啊，为了跳槽啊！！！！！ 1、初识RT_Thread生活常见的：电视机顶盒、路由器、电冰箱、微波炉。 嵌入式操作系统是应用在嵌入式系统的软件，对接嵌入式底层硬件与上层应用。在多任务管理、任务间通信、内存管理、定时器管理、设备管理。提供一套完整的机制，极大程度上便利嵌入式应用程序的开发、管理和维护 诞生于2006年 开发环境 MDK安装 示例代码 src：RT_Thread内核代码文件 libcpu：各类芯片/内核移植代码，比如STM include：RT_Thread内核头文件 components：RT_Thread外部组件代码，比如Finsh、Lwip 简介1、特点（优势）是一个集实时操作系统内核、中间件组件和开发者社区一体的技术平台，是一个组件完整丰富、高度可伸缩、简易开发、超低功耗、高安全性的物联网操作系统。具备一个IOT OS平台所需的所有关键组件。支持市面上所有主流的编译工具如GCC、Keil、IAR等，工具链完善、友好、支持各类标准接口，几乎支持市面上所有WiFi、MCU芯片 2、概述 RT_Thread全称是Real Time-Thread，是一个嵌入式实时多线程操作系统，基本属性之一是支持多任务，在RT-Thread系统中任务是通过多线程实现的 相较于Linux操作系统，其体积小，成本低，功耗低，启动快速，而且还实时性高、占用资源小等特点，非常实用与各种资源受限的场合 一、第一章1、常见操作系统 windows、Linux、Mac 安卓操作系统、IOS 鸿蒙 2、架构与其他的RTOS如Free RTOS、uC/OS的主要区别之一是，它不仅仅是一个实时内核，还具备丰富的中间层组件 3、分类 标准版本 nano版本 是一个极简版的硬实时内核，优C语言开发，采用面向对象的编程思维，具有良好的代码风格，是一款可裁剪的、抢占式实时多任务的RTOS。其内存资源占用极小，功能包括任务处理、软件定时器、信号量、邮箱和实时调度相对完整的实时操作系统特性。 使用于家电、消费电子、医疗设备、工控等领域大量使用的32位ARM 入门级MCU场合 特点 下载简单 代码简单 移植简单 使用简单 资源占用小 开源免费 Smart版本 基于RT_Thread操作系统衍生的心分支，面向带MMU、中高端应用的芯片、例如arm Cortex_A系列芯片、MIPS芯片、带MMU的RISC-V芯片 RT_Smart在RT_Thread操作系统的基础上启用独立、完整的进程方式，同时以混合微内核模式执行 把应用从内核中独立出来，形成独立的用户态应用程序，并具备独立的地址空间 二、RT_Thread移植碰见的问题 用的Nucleo-F103RBT6的开发板，下载时碰见 解决方法：按下载前按住复位，点下载后松开复位按键 2.选择UART2可打印数据 #define BSP_CLOCK_SOURCE (\"HSI\") 选择内部晶振 外部是 #define BSP_CLOCK_SOURCE (\"HSE\") #define BSP_CLOCK_SOURCE_FREQ_MHZ ((int32_t)0) 外部晶振频率 #define BSP_CLOCK_SYSTEM_FREQ_MHZ ((int32_t)72) 内部晶振频率 int main(void) { //int count = 1; #if 0 while (count++) { LOG_D(\"Hello RT-Thread!\"); rt_thread_mdelay(1000); } #endif return RT_EOK; 这样时，打开xcome输入help可查看数据 msh &gt;help RT-Thread shell commands: clear - clear the terminal screen version - show RT-Thread version information list_thread - list thread list_sem - list semaphore in system list_event - list event in system list_mutex - list mutex in system list_mailbox - list mail box in system list_msgqueue - list message queue in system list_mempool - list memory pool in system list_timer - list timer in system list_device - list device in system help - RT-Thread shell help. ps - List threads in the system. free - Show the memory usage in the system. reboot - Reboot System 三、内核介绍内核框架1、实时内核内核库是为了保障内核能够独立运行的一套小型的类似C库的函数实现子集，这部分根据编译器的不同自带C库的情况也会有些不同，当使用GNUGCC编译器时，会携带更多的标准C库实现 实时内核的实现包括 对象管理 实时调度器 线程管理 线程间通信 时钟管理 内存管理 设备管理 内核最小的资源占用情况是3KB ROM，1.2KB RAM 2、线程调度​ 是本操作系统中最小的调度单位，是基于优先级的全占式多线程调度算法，即在系统中除了中断处理函数、调度器上锁部分的代码和禁止中断的代码时不可抢占的，其他部分都是可以抢占的。包括线程调度器本身。 ​ 支持256个线程优先级（可通过配置文件更改为最大支持32个或8个优先级，针对STM32默认配置是32个线程优先级），0表示最高优先级，最低优先级留给空闲线程使用；也支持创建多个具有相同优先级的线程。相同优先级的线程间采用时间片的轮转调度算法进行调度，使每个线程运行相应时间。 ​ 调度器在寻找处于就绪状态的具有最高优先级的线程时，所经历的时间是恒定的，系统也不限制线程数量的多少，线程数目只与硬件平台的具体内存相关。 3、时钟管理 ​ 时钟管理以时钟节拍为基础，时钟节拍是本系统最小的时钟单位。 RT_Thread的定时器提供两类定时器机制 单次触发定时器 在启动后只会触发一次定时器事件，然后定时器自动停止 周期触发定时器 会周期性的触发定时器事件，直到用户手动的停止定时器，否则将永远持续执行下去。 4、线程间同步 ​ 采用信号量、互斥量与事件集实现线程间同步 线程通过对信号量、互斥量的获取与释放进行同步 互斥量采用优先级继承的方式解决了实时系统中常见的优先级翻转问题 线程同步机制支持线程按优先级等待或按先进先出方式获取信号量或互斥量 线程通过对事件的发送与接收进行同步 事件集支持多事件的“或触发”和“与触发”，适合与线程等待多个事件的情况 5、线程通信 支持邮箱和消息队列等通信机制。邮箱长度固定为4字节大小 消息队列能够接收不固定长度的消息，并把消息缓存在自己的内存空间中 邮箱效率较消息队列更为高效。邮箱和消息队列的发送动作可安全用于中断服务例程中 通信机制支持线程按优先级等待或按先进先出方式获取 6、内存管理 支持静态内存池管理集动态内存堆管理。当静态内存池具有可用内存时，系统对内存块分配的时间将是恒定的。 当静态内存池为空时，系统将申请内存块的线程挂起或阻塞掉（即线程等待一段时间后仍为获得内存块就放弃申请并返回，或者立即返回。等待的时间取决与申请内存块时设置的等待时间参数），当其他线程释放内存块到内存池时，如果有挂起的待分配内存块的线程存在的话，则系统会将这个线程唤醒 动态内存堆管理模块在系统资源不同的情况下，分别提供了面向小内存系统的内存管理算法及面向大内存系统的SLAB内存管理算法 还有一种动态内存堆管理叫做memheap，适用于系统含有多个地址可不连续的内存堆。使用memheap可以将多个内存堆“粘连”在一起，让用户操作先是在操作一个内存堆 7、I/O设备管理​ 将PIN、I2C、SPI、USB、UART等作为外设设备，统一通过设备注册完成。实现了按名称访问的设备管理子系统，可按照统一的API界面访问硬件设备。在设备驱动接口上，根据嵌入式系统的特点，对不同的设备可以挂接相应的事件。当设备事件触发时，由驱动程序通知给上层的应用程序 内核启动流程RT-Thread 支持多种平台和多种编译器，而 rtthread_startup() 函数是 RT-Thread 规定的统一启动入口。一般执行顺序是：系统先从启动文件开始运行，然后进入 RT-Thread 的启动函数 rtthread_startup() ，最后进入用户入口函数 main()，如下图所示： ​ 流程在startup_stm32f10xxb.s中的entry中的rtthread_startup();可以查看到线程流程 tid = rt_thread_create(\"main\", main_thread_entry, RT_NULL, RT_MAIN_THREAD_STACK_SIZE, RT_MAIN_THREAD_PRIORITY, 20); 线程名字是main，线程ID是tid，线程执行函数是main_thread_entry，优先级是RT_MAIN_THRED_PRIORITY，栈的大小是RT_MAIN_THREAD_STACK_SIZE， 四、线程管理 多任务是通过多线程方式实现，线程是任务的载体，是RTT中最基本的调度单位 线程执行时的运行环境称为上下文，具体来说就是各种变量和数据，包括所有的寄存器变量、堆栈、内存信息等 线程在运行的时候，它会认为自己独占CPU运行 4.1、线程管理特点主要功能时对线程进行管理和调度，系统中总共存在两类线程，分别时系统线程和用户线程，重点放在用户线程 系统线程时由RT_Thread内核创建的线程 用户线程是由应用程序创建的线程 两类线程都会从内核对象容器中分配线程对象，当线程被删除时，也会被从对象容器中删除。 4.2、线程工作机制4.2.1、线程控制块线程控制块由结构体struct rt_thread表示，是管理线程的一个数据结构，会存放线程的一些信息，例如优先级、线程名称、线程状态，也包含线程与线程之间连接用的链表结构，线程等待事件集合","categories":[{"name":"操作系统","slug":"操作系统","permalink":"https://tqoqt.github.io/categories/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"}],"tags":[{"name":"keil","slug":"keil","permalink":"https://tqoqt.github.io/tags/keil/"},{"name":"RT_Thread","slug":"RT-Thread","permalink":"https://tqoqt.github.io/tags/RT-Thread/"}],"author":"张君韵"},{"title":"keil等的开发环境","slug":"嵌入式开发环境","date":"2021-09-06T16:00:00.000Z","updated":"2021-09-21T13:49:54.284Z","comments":true,"path":"posts/keil1.html","link":"","permalink":"https://tqoqt.github.io/posts/keil1.html","excerpt":"","text":"前言 相信大部分人在设置开发环境时都会碰到很多问题。则写这个博客记录一些开发软件下载链接 IDM下载贼快 链接：https://pan.baidu.com/s/1uu5FGYhsk6frsCgq3HNKQg提取码：1234 按要求安装后，在浏览器安装插件，再安装一个IDM，可以下载巨快，安装其他插件也可无限制的下载百度网盘 Keil下载// -date: 2019-11-20// -time: 0:18 最新：MDK5.29版本https://armkeil.blob.core.windows.net/eval/MDK529.EXE// -date: 2019-06-10// -time: 0:1最新：MDK5.28A版本下载https://armkeil.blob.core.windows.net/eval/MDK528.EXE// -date: 2019-1-11// -time: 0:18最新：MDK5.27Pre版本下载https://armkeil.blob.core.windows.net/eval/MDK527pre.EXE// -date: 2018-09-11// -time: 0:18 最新：MDK5.26版本下载https://armkeil.blob.core.windows.net/eval/MDK526.EXE STM32CubeMXSTM32CubeMX - STM32Cube初始化代码生成器 - STMicroelectronics 画板工具立创ＥＤＡhttps://image.lceda.cn/files/lceda-windows-x64-6.4.23.exe 嘉立创打板工具https://download.jlc.com/jlchelper/release/3.4.4/JLCPcAssit_setup_3.4.4.zip ＰｉｃＧｏhttps://github-releases.githubusercontent.com/113965016/c12415ff-1328-4668-b8b1-df91177cb077?X-Amz-Algorithm=AWS4-HMAC-SHA256&amp;X-Amz-Credential=AKIAIWNJYAX4CSVEH53A%2F20210907%2Fus-east-1%2Fs3%2Faws4_request&amp;X-Amz-Date=20210907T145427Z&amp;X-Amz-Expires=300&amp;X-Amz-Signature=0bbfca0b314cbe6fc1b8fd71e73181b9d47774c7131bfe2419c2d9803192aa83&amp;X-Amz-SignedHeaders=host&amp;actor_id=84925708&amp;key_id=0&amp;repo_id=113965016&amp;response-content-disposition=attachment%3B%20filename%3DPicGo-Setup-2.3.0-beta.8-x64.exe&amp;response-content-type=application%2Foctet-stream ＶＳＣｏｄｅhttps://az764295.vo.msecnd.net/stable/e7d7e9a9348e6a8cc8c03f877d39cb72e5dfb1ff/VSCodeUserSetup-x64-1.60.0.exe 万兴PDF破解版可免费转换各种文件链接：https://pan.baidu.com/s/1DeuXZabHEa2fzO5uViJ_xg提取码：1234 Ｏｆｆｉｃ破解版，可安装任意的文件链接：https://pan.baidu.com/s/1_JbUy3teCUDlwC5iRgWwsw提取码：1234 STM开发问题突然不能下载程序 swd/jtag communication failure 发现这个问题 则 将板子供电全部断开，这里包括3.3V电源供电和JLINK等所有能给开发板供上电的设备全断开2，找到BOOT0引脚，将BOOT0拉高。 方法：在板子上找一个高电平引脚，手动用导线将BOOT0连接到该引脚上即可。 注意：我的STM32板子供电是3.3V的，所以我找了一个3.3V的引脚，用导线连接到了BOOT0上，千万别弄错了，电平接高了不小心可是要烧坏板子的！3，BOOT0拉高以后，保持这个姿势不要动，打开电源，重新给板子上电4，插上JLink或者STLink ，下载程序。 一般这次肯定可以下载进去了。下载完成以后，就可以断开BOOT0了，让他恢复低电平。好到这里就全部完成了，板子肯定也回复正常了，继续嗨吧。 上述方法原因解释开板默认JTAG和SWD接口都是打开的，BOOT0是低电平，当把BOOT0置高时，给板子上电，板子启动的时候程序会卡住，也就是内部闪光的程序并未执行，这个时候SW和JTAD接口都是出于默认打开的状态。然后下载一个不关闭JTAG或者SW接口的程序，覆盖之前闪存中的程序就好了。 所以先将板子供电全部断开（这里包括3.3V电源供电和JLINK等所有能给开发板供上电的设备全断开），再将开发板的BOOT0拉高，重新给开发板上电，把程序中关闭JTAG或者SW的程序删掉，然后下载到开发板中，程序下载完成就好了。 SWD和JTAG被关闭原因正搞板子发现程序下载不进去了，到处查找原因，发现自己在程序中不小心把STM32的SWD和JTAD接口都给关了，如下就是关掉这两个接口的两句程序：","categories":[{"name":"开发环境篇","slug":"开发环境篇","permalink":"https://tqoqt.github.io/categories/%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E7%AF%87/"}],"tags":[{"name":"STM32CubeMX","slug":"STM32CubeMX","permalink":"https://tqoqt.github.io/tags/STM32CubeMX/"},{"name":"keil","slug":"keil","permalink":"https://tqoqt.github.io/tags/keil/"}],"author":"张君韵"},{"title":"Git使用","slug":"Git","date":"2021-09-06T16:00:00.000Z","updated":"2021-09-10T16:07:14.128Z","comments":true,"path":"posts/git.html","link":"","permalink":"https://tqoqt.github.io/posts/git.html","excerpt":"","text":"Gitgit简介Git有三大区（工作-Untracked、暂存-Unstaged、版本-Uncommited） 1.版本控制本地版本控制个人使用本地存储 集中版本控制存储到服务器中，使用完上传到服务器中，需要时从服务器下载，有服务器奔溃风险 分布式版本控制每个人拥有全部代码，可以存储在本地，有网时上传到服务器中 2.git和SVN的区别SVN是集中式版本控制系统，版本库集中放在服务器中，工作时从服务器更新到最新版本，完成工作后上传到服务器中，必须联网，对网络带宽要求高 git是分布式版本控制系统，没有中央服务器，每个人的电脑就是一个完整的版本库，工作时不需联网，协同时，两人互相把修改的部分推送给对方，就可以看到对方的修改。可以看到对方修改了那些代码和文件 3.git命令1.cd .. 回到文件上一级 2.cd xx 到xx文件夹中 3.pwd 显示当前目录 4.clear 清屏 5、ls 列出当前文件夹中的文件 6、touch index.js 新建一个index.js文件 7、rm index.js 移除一个index.js文件 8、mkdir test 新建一个test文件夹 9、rm -r test 删除掉test文件夹 10、mv index.html test 把index.html文件移动到test文件夹中（在命令行中的文件） 11、reset 重新初始化终端/清屏 12、history 查看命令历史 13、help 帮助 14、exit 退出 15、# 注释 4、Git配置1、git config –global –list 查看配置的用户名和邮箱 2、git config –global user.name “xx” 设置用户名 3、gitconfig –global user.email “xx” 设置用户邮箱 5、工作原理 git本地有三个工作区，工作目录（working Directory)、暂存区（Stage/index）、资源库（Repository或git Directiory），加上远程的git仓库（Remote Directory） ​ git push（上传到服务） Remote Directory（远程仓库） git commit（提交修改） History（本地git仓库） git pull（从服务器下拉代码） git add files（添加文件） Stage（index）（暂存区） git reset（上一个版本） Working Directory（本地文件） git checkout（切换本地分支） ​ ​ ​ ​ git clone 网址，克隆网址东西 6、git文件操作 7、git的基本操作1、git add . 添加所有文件提交到暂存区 2、git status 查看所有文件的状态 3、git commit -m “new file hello.txt” 提交暂存区的文件到本地仓库 -m “xx”提交信息 4、忽略文件 ​ #.txt #忽略所有的.txt文件，.txt结尾的文件不会上传 ​ ！lib.txt #但lib.txt文件除外 ​ /temp #仅忽略项目根目录下的TODO文件，不包括其他目录temp ​ build/ #忽略build/目录下的所有文件 （/在前面往上忽略，在后面往下忽略） ​ doc/*.txt #会忽略doc/notes.txt,但不包括doc/server/arch.txt 8、个人操作 git init 初始化仓库 git clone 网址 克隆网址上的仓库代码 无法克隆时去控制面板的凭据管理器的Windows凭据中找到其用户名和密码修改 git config –global –list 查看配置的用户名和邮箱 git config –global user.name “xx” 设置用户名 gitconfig –global user.email “xx” 设置用户邮箱 CD xx 进入克隆下来的文件中 touch test.txt 新建test.txt文件 rm test.txt 移除一个test.txt文件 mkdir test 新建一个test文件夹 rm -r test 删除掉test文件夹 git add test.txt 添加test.txt文件到暂存区 mv index.html test 把index.html文件移动到test文件夹中（在命令行中的文件） reset 重新初始化终端/清屏 history 查看命令历史 git commit -m “new test.txt” 多次git add后，提交形成记录，“new test.txt”为提交日志 git status 查看未提交的文件 git branch -a 查看所有分支，本地及远程分支 git checkout -b xxx 以当前分支为基础新建立本地分支xxx git checkout -b xxx origin/xxx 以远程分支xxx为基础新建立本地分支xxx，本地分支名和远程分支名一致，不然推送不到远程服务器 git checkout xxx 切换到本地其他分支，切换前要提交当前分支点改动 git branch -D xxx 强制删除本地分支 git push origin –delete xxx 删除远程服务器分支 git pull origin xxx 从服务器分支更新代码到本地 git push origin xxx 将数据上推到服务器分支中，上推前先将本地代码更新到最新版本 git tag xx 建立本地标签 git tag 查看本地所有标签 git push origin –tags 把本地的所有文档推送到远程服务器 git fetch 从远程服务器更新代码到本地，但不自动合并，执行后可以更新分支和tag git merge xxx 把本地分支xxx合并到当前分支 echo “xxxxx” &gt;test.txt 在test.txt文件中写入数据xxxx 修改git branch -a中显示出了的head指向-git remote set-head origin feature可将head指向feature 列出本地所有分支：命令：git branch 创建一个新分支：命令：git branch 分支名称 删除指定本地分支：命令：git branch -d 删除的分支名称 -D为强制删除，-d为正常操作情况下的删除。 命令大全ls -a 查看目录中的文件夹（蓝色）和文件（白色） git add &lt;文件名&gt; 将文件提交到暂存区 git branch -a 查看本地及远程分支 git branch -l 查看本地分支 git branch -r 查看远程所有分支 git checkout -b dev 建立一个新的本地分支dev git checkout dev 切换到本地dev git checkout -d master dev 删除本地库dev git checkout –track origin/dev 切换到远程dev分支 git clone 网址 克隆网址上的仓库代码 无法克隆时去控制面板的凭据管理器的Windows凭据中找到其用户名和密码修改 git commit -m “提交信息” 将暂存区的文件提交到本地仓库 git diff branchname filepath 当前分支的文件与branchname分支的文件进行比较 git diff commitld filepath 与某次提交进行比较 git diff filepath 工作区与暂存区比较 git diff HEAD filepath 工作区与HEAD（当前工作分支）比较 git fetch 从远程获取最新版本到本地不会自动merge git log 查看git commit的日志，推出git log按下q即可 git ls-files 显示出暂存区和工作区内的文件 git merge origin/dev 将分支dev和当前分支合并g’i’tte’ch git pull 本地与服务器端同步 git push origin master 将本地分支推送到服务器master分支上 gti rm –cache 文件名 仅仅删除暂存区里的文件 git rm -f 文件名 删除暂存区和工作区的文件 git reset –soft 版本库ID 撤销已提交的版本库，不会修改暂存区和工作区 git reset –mixed 版本库ID 撤销已提交的版本库和暂存区不会修改工作区 git reset hard 版本库ID 彻底将工作区、暂存区和版本库记录恢复到指定的版本库 git status 查看当前状态","categories":[{"name":"学习篇","slug":"学习篇","permalink":"https://tqoqt.github.io/categories/%E5%AD%A6%E4%B9%A0%E7%AF%87/"}],"tags":[{"name":"Git","slug":"Git","permalink":"https://tqoqt.github.io/tags/Git/"}],"author":"张君韵"},{"title":"相册","slug":"图库","date":"2021-09-05T16:00:00.000Z","updated":"2021-10-27T12:17:14.227Z","comments":true,"path":"posts/xiance.html","link":"","permalink":"https://tqoqt.github.io/posts/xiance.html","excerpt":"","text":"2021/10/26回校","categories":[{"name":"生活篇","slug":"生活篇","permalink":"https://tqoqt.github.io/categories/%E7%94%9F%E6%B4%BB%E7%AF%87/"}],"tags":[{"name":"相册","slug":"相册","permalink":"https://tqoqt.github.io/tags/%E7%9B%B8%E5%86%8C/"},{"name":"图片","slug":"图片","permalink":"https://tqoqt.github.io/tags/%E5%9B%BE%E7%89%87/"}],"author":"张君韵"},{"title":"四线模拟IIC点亮屏幕","slug":"四线模拟IIC","date":"2021-09-01T16:00:00.000Z","updated":"2021-09-10T16:07:33.829Z","comments":true,"path":"posts/stm32001.html","link":"","permalink":"https://tqoqt.github.io/posts/stm32001.html","excerpt":"","text":"前言主要是运用stm32F103RBT6 中的模拟IIC点亮四线的OLED屏 先不写上链接 链接：https://pan.baidu.com/s/1ebrh6OHc7GkQpjKQb7PRlg提取码：1234 测试一下PicGo图床","categories":[{"name":"学习篇","slug":"学习篇","permalink":"https://tqoqt.github.io/categories/%E5%AD%A6%E4%B9%A0%E7%AF%87/"}],"tags":[{"name":"STM32","slug":"STM32","permalink":"https://tqoqt.github.io/tags/STM32/"},{"name":"STM32CubeMX","slug":"STM32CubeMX","permalink":"https://tqoqt.github.io/tags/STM32CubeMX/"}],"author":"张君韵"},{"title":"Hexo之渲染绕过","slug":"Hexo-xr","date":"2020-04-27T16:00:00.000Z","updated":"2021-06-13T05:55:39.000Z","comments":true,"path":"posts/17fd92ae.html","link":"","permalink":"https://tqoqt.github.io/posts/17fd92ae.html","excerpt":"","text":"0x001 Hexo 渲染 在Hexo部署时会默认渲染source下的所有html页面，但有时候想在Hexo博客上单独自定义html页面或README.md时，却不希望被Hexo渲染。因此对某个文件或者目录进行排除渲染是非常必要的。 0x002 方法一：font matterHexo新建网站页面，然后将你的代码直接写入 index.md 中 在 Front matter 中添加 layout: false，此方法适用于单一的纯HTMLCSS 页面。 --- title: tools date: 2020-04-28 00:00:00 type: \"tools\" layout: false --- 0x003 方法二：skip render在博客根目录下的 _config.yml，找到 skip_render，大概在32行左右，写入你想要的跳过渲染的路径，注意缩进和空格。 # 指定目录跳过hexo渲染 skip_render: - 'tools/*' - 'tools/**' 注释：tools/* 表示在目录 source/fireworks 下的文件全部跳过渲染，tools/** 表示在博客根目录 source/tools/ 文件夹下的文件全部跳过渲染（例如页面的 js、css 在另一个文件夹中）。 0x004 案例：webstack 导航webstack是一个纯静态的网址导航网站，内容均由viggo收集并整理。项目基于bootstrap前端框架开发。 Github：https://github.com/WebStackPage/WebStackPage.github.io 在博客根目录 source/下新建tools，然后新建index.html,将webstack网页源码全选复制粘贴到里面。 本站的webstack源码：view-source:http://luckyzmj.cn/tools/ 注意：将源码里的部分信息以及跳转链接按照你真实个人博客的环境进行修改。 然后打开博客根目录下配置文件_config.yml，找到skip_render，做如下修改： skip_render: - 'tools/*' - 'tools/**' 最后执行hexo clean和hexo s -g 本地预览，检查无误后hexo g -d部署到服务器上即可。 参考文章 https://xiabor.com/2020/04/21/hexo3/#%E5%A6%82%E4%BD%95%E8%B7%B3%E8%BF%87hexo%E7%9A%84%E6%B8%B2%E6%9F%93","categories":[{"name":"博客篇","slug":"博客篇","permalink":"https://tqoqt.github.io/categories/%E5%8D%9A%E5%AE%A2%E7%AF%87/"}],"tags":[{"name":"Hexo","slug":"Hexo","permalink":"https://tqoqt.github.io/tags/Hexo/"},{"name":"渲染绕过","slug":"渲染绕过","permalink":"https://tqoqt.github.io/tags/%E6%B8%B2%E6%9F%93%E7%BB%95%E8%BF%87/"}],"author":"Luckey"},{"title":"PicGo+GitHub 图床搭建","slug":"PicGo-GitHub","date":"2020-03-14T16:00:00.000Z","updated":"2021-06-13T05:55:39.000Z","comments":true,"path":"posts/7a46f93c.html","link":"","permalink":"https://tqoqt.github.io/posts/7a46f93c.html","excerpt":"","text":"前言用GitHub搭建图床，在很久之前我就有了解，但由于市面上有挺多免费的图床，比如我之前一直在用的 路过图床，所以一直懒得动手搭建GitHub图床。一直到前两天我在完善博客的相册时，发现 路过图床 免费版的有这么多限制，比如：每小时限制上传50张图片，每天限制上传100张图片，而且免费版用户的存储容量貌似不过300M，这才意识到有一个自己的GitHub图床是多么重要。 0x001 PicGO 介绍PicGo是一款图片上传工具，目前支持 SM.MS图床、腾讯云COS、GitHub图床、七牛图床、Imgur图床、阿里云OSS、又拍云图床，未来将支持更多图床。 在支持的这些图床中，SM.MS和Imgur有免费版和收费版，免费版的肯定有很多的使用限制，比如每小时限制上传次数，限制用户的上传容量等等；腾讯云COS、阿里云、有拍云都是要收费使用的；七牛云貌似前期使用免费，后期又要收费才能使用，就剩下的GitHub才是免费且最可靠的。 PicGo源项目GitHub地址已给出，但是去GitHub下载速度非常慢，这里额外提供一个蓝奏云的快速下载地址。 GitHub地址：https://github.com/Molunerfinn/PicGo 蓝奏云地址：https://luckyzmj.lanzous.com/id3e0id 0x002 GitHub 图床1. 创建GitHub图床仓库首先需要有一个登录GitHub的账号，没有的话去GitHub官网注册一个 创建一个新的图床仓库，点击右上角的New repository 填写如下配置信息，然后Create创建仓库 2. 获取GitHub token值点击右上的头像，选择设置Setting 点击选择Developer settings 点击 Generate New token 填写如下配置信息，只要勾选repo选项即可，然后页面拉到底部点击Generate token 即可 此时会跳转到带有token的页面，将token值复制记录下来，之后用PicGo绑定GitHub图床时会利用到 0x003 PicGo 配置1. 绑定GitHub图床首先下载安装好PicGo软件，然后在右列表找到GitHub图床配置 1. 设定仓库名(必填)： 按照“GitHub账户名/仓库名的格式填写”，比如我的是：Luckyzmj/imgbed 2. 设定分支名(必填)： 仓库分支名填写”master”或者”main”，视情况而定。因为GitHub 官方表示,从2020年10月1日起,在该平台上创建的所有新的源代码仓库将默认被命名为”main”,而不是原先的”master”。 3. 设定Token(必填)： 将之前步骤的Token值复制粘贴到这里 4. 指定存储路径： 这个选项可以为空，如果想将图片上传到仓库的指定目录下，可以填写目录名加/，比如我的imgbed仓库下有个posts文件夹，需设置为 posts/ 5. 设定自定义域名： 这里统一用jsdelivr的CDN加速域名，在上传图片后成功后，PicGo会将“自定义域名+上传的图片名”生成的访问链接 自定义域名格式：https://cdn.jsdelivr.net/gh/GitHub账户名/仓库名 以我的格式为例：https://cdn.jsdelivr.net/gh/Luckyzmj/imgbed 配置完全部信息后，点击 设为默认图床，最后点击确定即可 2. 上传图片到图床在上传区上传图片，可支持本地图片上传(可多选图片)、剪贴板上传、URL上传等三种方式。上传图片成功后，选择你想要生成的图片链接格式 在图片区，可以看到成功上传的图片，选择相应的图片进行操作即可 3. PicGo 注意事项如果配置完PicGo后却上传图片失败，可以参考以下方法： 检查自定义域名是否正确 仓库名不要有空格 图片名字不要带有特殊符号，如：%、+、*、空格等 建议开启时间戳重命名，防止图片名字重复 上传图片间歇太短，需在PicGo设置中关闭Server选项 PicGo应用不稳定因素，需重启应用 参考文章 https://blog.csdn.net/sunhwee/article/details/100109956","categories":[{"name":"博客篇","slug":"博客篇","permalink":"https://tqoqt.github.io/categories/%E5%8D%9A%E5%AE%A2%E7%AF%87/"}],"tags":[{"name":"PicGo","slug":"PicGo","permalink":"https://tqoqt.github.io/tags/PicGo/"},{"name":"GitHub图床","slug":"GitHub图床","permalink":"https://tqoqt.github.io/tags/GitHub%E5%9B%BE%E5%BA%8A/"}],"author":"Luckey"},{"title":"阿里云服务器部署Hexo博客","slug":"blog-aliyun","date":"2020-02-26T16:00:00.000Z","updated":"2021-06-13T05:55:39.000Z","comments":true,"path":"posts/19d2a4e6.html","link":"","permalink":"https://tqoqt.github.io/posts/19d2a4e6.html","excerpt":"","text":"前言 相信大部分人使用Hexo搭建个人博客都会部署到一些免费的代码托管平台上，但这些免费的平台总是差强人意，比如国外的GitHub平台虽然完全免费，但在国内访问加载速度非常慢，又或者是国内的码云平台免费版有许多功能被阉割掉了，比如不能自定义域名，不能每次自动刷新提交的代码，需要到码云平台上手动刷新，如此一来非常繁琐。 为了有效解决上诉的一些问题，有条件的话，不妨在自己的云服务器上搭建Hexo博客。 效果演示 这是Hexo博客部署到GitHub上的网站测速效果 这是Hexo博客部署到阿里云服务器后的网站测速效果 环境准备 本地环境：Windows 10 云服务器环境：阿里云ECS（CentOS7.x） 开始部署 本地环境搭建1.安装Git 到git官网上下载.exe文件,Download git,安装选项还是全部默认，最后一步添加路径时选择Use Git from the Windows Command Prompt。 Git下载地址 Git教程 2.安装Nodejs 到Node.js官网下载.exe文件，安装选项全部默认。安装好之后，按Win+R打开cmd命令提示符，输入node -v和npm -v，若出现版本号，则说明安装成功。 使用npm阿里的国内镜像进行加速下载 npm config set registry https://registry.npm.taobao.org 4.安装Hexo 先创建一个文件夹MyBlog，用来存放自己的博客文件，然后cd到这个文件夹下（或者在这个文件夹下直接右键git bash here打开）。 定位到该目录下，输入npm install -g hexo-cli安装Hexo。可能会有几个报错，不用理会。 npm install -g hexo-cli 安装完后输入hexo -v,若出现版本号则，说明安装成功。 接下来初始化一下hexo,即初始化我们的博客，输入hexo init初始化文件夹 hexo init MyBlog 新建完成后，指定文件夹MyBlog目录下有： node_modules: 依赖包 public：存放生成的页面 scaffolds：生成文章的一些模板 source：用来存放你的文章 themes：主题** _config.yml: 博客的配置文件** 输入hexo g生成静态网页，然后输入hexo s打开本地服务器预览 hexo g hexo s 生成ssh公钥在本地桌面点击右键Git Bash Here打开Git终端，执行如下命令`,一路回车 ssh-keygen -t rsa 这个时候它会告诉你已经生成了.ssh的文件夹。在git bash中输入 cat ~/.ssh/id_rsa.pub 输出的内容就是公钥信息了 阿里云服务器环境搭建安装Git yum install git 创建Git账户 adduser git 添加账户权限 chmod 740 /etc/sudoers vim /etc/sudoers 找到 ## Allow root to run any commands anywhere root ALL=(ALL) ALL 添加以下内容 git ALL=(ALL) ALL 保存退出并改回权限 chmod 400 /etc/sudoers 设置git账户密码 sudo passwd git 切换至git用户，创建 ~/.ssh 文件夹和 ~/.ssh/authorized_keys 文件，并赋予相应的权限 su git mkdir ~/.ssh vim ~/.ssh/authorized_keys # 然后将win10中生成的id_rsa.pub文件中的公钥复制到authorized_keys chmod 600 /home/git/.ssh/authorized_keys chmod 700 /home/git/.ssh 在本地Git终端中测试是否能免密登录git，其中SERVER为填写自己的云主机IP，执行输入yes后不用密码就说明好了 ssh -v git@SERVER 创建目录 #repo作为为Git仓库目录 mkdir /var/repo chown -R git:git /var/repo chmod -R 755 /var/repo #hexo作为网站根目录 mkdir /var/www/hexo chown -R git:git /var/www/hexo chmod -R 755 /var/www/hexo 然后创建一个裸的 Git 仓库 cd var/repo git init --bare hexoBlog.git 创建一个新的 Git 钩子，用于自动部署 在 /var/repo/hexoBlog.git 下，有一个自动生成的 hooks 文件夹。我们需要在里边新建一个新的钩子文件 post-receive。 vim /var/repo/hexoBlog.git/hooks/post-receive 按 i 键进入文件的编辑模式，在该文件中添加两行代码（将下边的代码粘贴进去)，指定 Git 的工作树（源代码）和 Git 目录（配置文件等） #!/bin/bash git --work-tree=/var/www/hexo --git-dir=/var/repo/hexoBlog.git checkout -f 然后，按 Esc 键退出编辑模式，输入”:wq” 保存退出。 修改文件权限，使得其可执行 chown -R git:git /var/repo/hexoBlog.git/hooks/post-receive chmod +x /var/repo/hexoBlog.git/hooks/post-receive 到此为止 Git 仓库就搭建完成了。 阿里云服务器配置Nginx用宝塔面板来一键部署Nginx Linux面板6.0安装命令(暂时仅兼容Centos7.x，其它系统版本请安装5.9稳定版)： yum install -y wget &amp;&amp; wget -O install.sh http://download.bt.cn/install/install_6.0.sh &amp;&amp; bash install.sh Linux面板6.0升级专业版 curl http://download.bt.cn/install/update6.sh|bash 安装完成后会显示面板后台地址·账号·密码。打开面板后台地址登陆面板，选择Nginx的部署方案，静静等待部署。 部署完成，点击网站-添加站点-输入域名(没有域名的输入自己的IP地址)-底部的PHP版本选择”纯静态”-提交。 网站创建完成后点击设置-配置文件 server { listen 80; # server_name 填写自己的域名 server_name luckyzmj.cn blog.luckyzmj.cn; index index.php index.html index.htm default.php default.htm default.html; # 这里root填写自己的网站根目录，修改为/var/www/hexo root /var/www/hexo; -保存 点击设置-网站目录，修改为/var/www/hexo ，保存 重启宝塔面板服务 service bt restart 本地Hexo部署到阿里云服务器进入到本地Hexo博客的文件夹MyBlog,右键点击Git Bash Here，输入命令 #定义邮箱(更换为你的邮箱地址就行) git config --global user.email \"you@example.com\" #定义名称(更换自定义一个名称就行) git config --global user.name \"Your Name\" 配置_config.yml,完成自动化部署 打开本地Hexo博客的文件夹MyBlog文件夹下的_config.yml, 找到deploy deploy: type: git #server改为你的服务IP地址或解析后的域名 #例如我改为repo: git@luckyzmj.cn:/var/repo/blog.git repo: git@server:/var/repo/blog.git branch: master 保存后，即可测试部署 再进入到本地Hexo博客的文件夹MyBlog,右键点击Git Bash Here，输入命令 hexo clean hexo g -d 不报错说明完成，打开浏览器输入你的域名或ip地址就可以看到你部署的Hexo博客了。 到此为止，我们已经成功部完成，并且访问自己的服务器端比访问Github快多了。 小贴士 在部署过程中，执行 hexo d发现部署老是出错，什么权限不允许之类的，这里我们需要检查我们在上述的git操作部署是否使用了git用户操作，若是没有，需要给相应的目录更改用户组 使用 chown -R git:git /var/repo/ 这条命令递归的将repo目录及其子目录用户组设置为git。 同时使用 chown -R git:git /var/www/hexo 这样即可解决此类问题。 还有一个问题就是绑定域名后不能访问。原因是在国内任何域名只要绑定到国内的服务器主机上都必须去工信部和公安部备案完后才能正常使用。如果是港澳台的服务器或者是国外的服务器则可以不需要备案。 参考文章 https://blog.csdn.net/weixin_33907511/article/details/91398208?utm_source=distribute.pc_relevant.none-task","categories":[{"name":"博客篇","slug":"博客篇","permalink":"https://tqoqt.github.io/categories/%E5%8D%9A%E5%AE%A2%E7%AF%87/"}],"tags":[{"name":"Hexo","slug":"Hexo","permalink":"https://tqoqt.github.io/tags/Hexo/"},{"name":"阿里云","slug":"阿里云","permalink":"https://tqoqt.github.io/tags/%E9%98%BF%E9%87%8C%E4%BA%91/"},{"name":"博客","slug":"博客","permalink":"https://tqoqt.github.io/tags/%E5%8D%9A%E5%AE%A2/"}],"author":"Luckey"}],"categories":[{"name":"学习篇","slug":"学习篇","permalink":"https://tqoqt.github.io/categories/%E5%AD%A6%E4%B9%A0%E7%AF%87/"},{"name":"技巧篇","slug":"技巧篇","permalink":"https://tqoqt.github.io/categories/%E6%8A%80%E5%B7%A7%E7%AF%87/"},{"name":"操作系统","slug":"操作系统","permalink":"https://tqoqt.github.io/categories/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"},{"name":"开发环境篇","slug":"开发环境篇","permalink":"https://tqoqt.github.io/categories/%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E7%AF%87/"},{"name":"生活篇","slug":"生活篇","permalink":"https://tqoqt.github.io/categories/%E7%94%9F%E6%B4%BB%E7%AF%87/"},{"name":"博客篇","slug":"博客篇","permalink":"https://tqoqt.github.io/categories/%E5%8D%9A%E5%AE%A2%E7%AF%87/"}],"tags":[{"name":"代码规范","slug":"代码规范","permalink":"https://tqoqt.github.io/tags/%E4%BB%A3%E7%A0%81%E8%A7%84%E8%8C%83/"},{"name":"GitHub","slug":"GitHub","permalink":"https://tqoqt.github.io/tags/GitHub/"},{"name":"keil","slug":"keil","permalink":"https://tqoqt.github.io/tags/keil/"},{"name":"RT_Thread","slug":"RT-Thread","permalink":"https://tqoqt.github.io/tags/RT-Thread/"},{"name":"STM32CubeMX","slug":"STM32CubeMX","permalink":"https://tqoqt.github.io/tags/STM32CubeMX/"},{"name":"Git","slug":"Git","permalink":"https://tqoqt.github.io/tags/Git/"},{"name":"相册","slug":"相册","permalink":"https://tqoqt.github.io/tags/%E7%9B%B8%E5%86%8C/"},{"name":"图片","slug":"图片","permalink":"https://tqoqt.github.io/tags/%E5%9B%BE%E7%89%87/"},{"name":"STM32","slug":"STM32","permalink":"https://tqoqt.github.io/tags/STM32/"},{"name":"Hexo","slug":"Hexo","permalink":"https://tqoqt.github.io/tags/Hexo/"},{"name":"渲染绕过","slug":"渲染绕过","permalink":"https://tqoqt.github.io/tags/%E6%B8%B2%E6%9F%93%E7%BB%95%E8%BF%87/"},{"name":"PicGo","slug":"PicGo","permalink":"https://tqoqt.github.io/tags/PicGo/"},{"name":"GitHub图床","slug":"GitHub图床","permalink":"https://tqoqt.github.io/tags/GitHub%E5%9B%BE%E5%BA%8A/"},{"name":"阿里云","slug":"阿里云","permalink":"https://tqoqt.github.io/tags/%E9%98%BF%E9%87%8C%E4%BA%91/"},{"name":"博客","slug":"博客","permalink":"https://tqoqt.github.io/tags/%E5%8D%9A%E5%AE%A2/"}]}