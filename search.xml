<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>RT_Thread</title>
      <link href="posts/rtt1.html"/>
      <url>posts/rtt1.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><hr><p> 学习RT_Thread一定要坚持下去啊，为了跳槽啊！！！！！</p><h2 id="1、初识RT-Thread"><a href="#1、初识RT-Thread" class="headerlink" title="1、初识RT_Thread"></a>1、初识RT_Thread</h2><p>生活常见的：电视机顶盒、路由器、电冰箱、微波炉。</p><p>嵌入式操作系统是应用在嵌入式系统的软件，对接嵌入式底层硬件与上层应用。在多任务管理、任务间通信、内存管理、定时器管理、设备管理。提供一套完整的机制，极大程度上便利嵌入式应用程序的开发、管理和维护</p><p>诞生于2006年</p><h2 id="开发环境"><a href="#开发环境" class="headerlink" title="开发环境"></a>开发环境</h2><ol><li>MDK安装</li><li>示例代码<ol><li>src：RT_Thread内核代码文件</li><li>libcpu：各类芯片/内核移植代码，比如STM</li><li>include：RT_Thread内核头文件</li><li>components：RT_Thread外部组件代码，比如Finsh、Lwip</li></ol></li></ol>]]></content>
      
      
      <categories>
          
          <category> 操作系统 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> keil </tag>
            
            <tag> RT_Thread </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>keil等的开发环境</title>
      <link href="posts/keil1.html"/>
      <url>posts/keil1.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><hr><p>  相信大部分人在设置开发环境时都会碰到很多问题。则写这个博客记录一些开发软件下载链接</p><p>IDM下载贼快</p><p>链接：<a href="https://pan.baidu.com/s/1uu5FGYhsk6frsCgq3HNKQg">https://pan.baidu.com/s/1uu5FGYhsk6frsCgq3HNKQg</a><br>提取码：1234</p><p>按要求安装后，在浏览器安装插件，再安装一个IDM，可以下载巨快，安装其他插件也可无限制的下载百度网盘</p><h2 id="Keil下载"><a href="#Keil下载" class="headerlink" title="Keil下载"></a>Keil下载</h2><p>// -date:  2019-11-20<br>// -time:  0:18 最新：MDK5.29版本<br><a href="https://armkeil.blob.core.windows.net/eval/MDK529.EXE">https://armkeil.blob.core.windows.net/eval/MDK529.EXE</a><br>// -date:  2019-06-10<br>// -time:  0:1<br>最新：MDK5.28A版本下载<br><a href="https://armkeil.blob.core.windows.net/eval/MDK528.EXE">https://armkeil.blob.core.windows.net/eval/MDK528.EXE</a><br>// -date:  2019-1-11<br>// -time:  0:18<br>最新：MDK5.27Pre版本下载<br><a href="https://armkeil.blob.core.windows.net/eval/MDK527pre.EXE">https://armkeil.blob.core.windows.net/eval/MDK527pre.EXE</a><br>// -date:  2018-09-11<br>// -time:  0:18</p><p>最新：MDK5.26版本下载<br><a href="https://armkeil.blob.core.windows.net/eval/MDK526.EXE">https://armkeil.blob.core.windows.net/eval/MDK526.EXE</a></p><h2 id="STM32CubeMX"><a href="#STM32CubeMX" class="headerlink" title="STM32CubeMX"></a>STM32CubeMX</h2><p><a href="https://www.st.com/zh/development-tools/stm32cubemx.html">STM32CubeMX - STM32Cube初始化代码生成器 - STMicroelectronics</a></p><h2 id="画板工具"><a href="#画板工具" class="headerlink" title="画板工具"></a>画板工具</h2><h3 id="立创EDA"><a href="#立创EDA" class="headerlink" title="立创ＥＤＡ"></a>立创ＥＤＡ</h3><p><a href="https://image.lceda.cn/files/lceda-windows-x64-6.4.23.exe">https://image.lceda.cn/files/lceda-windows-x64-6.4.23.exe</a></p><h3 id="嘉立创打板工具"><a href="#嘉立创打板工具" class="headerlink" title="嘉立创打板工具"></a>嘉立创打板工具</h3><p><a href="https://download.jlc.com/jlchelper/release/3.4.4/JLCPcAssit_setup_3.4.4.zip">https://download.jlc.com/jlchelper/release/3.4.4/JLCPcAssit_setup_3.4.4.zip</a></p><h2 id="PicGo"><a href="#PicGo" class="headerlink" title="ＰｉｃＧｏ"></a>ＰｉｃＧｏ</h2><p><a href="https://github-releases.githubusercontent.com/113965016/c12415ff-1328-4668-b8b1-df91177cb077?X-Amz-Algorithm=AWS4-HMAC-SHA256&amp;X-Amz-Credential=AKIAIWNJYAX4CSVEH53A/20210907/us-east-1/s3/aws4_request&amp;X-Amz-Date=20210907T145427Z&amp;X-Amz-Expires=300&amp;X-Amz-Signature=0bbfca0b314cbe6fc1b8fd71e73181b9d47774c7131bfe2419c2d9803192aa83&amp;X-Amz-SignedHeaders=host&amp;actor_id=84925708&amp;key_id=0&amp;repo_id=113965016&amp;response-content-disposition=attachment;%20filename=PicGo-Setup-2.3.0-beta.8-x64.exe&amp;response-content-type=application/octet-stream">https://github-releases.githubusercontent.com/113965016/c12415ff-1328-4668-b8b1-df91177cb077?X-Amz-Algorithm=AWS4-HMAC-SHA256&amp;X-Amz-Credential=AKIAIWNJYAX4CSVEH53A%2F20210907%2Fus-east-1%2Fs3%2Faws4_request&amp;X-Amz-Date=20210907T145427Z&amp;X-Amz-Expires=300&amp;X-Amz-Signature=0bbfca0b314cbe6fc1b8fd71e73181b9d47774c7131bfe2419c2d9803192aa83&amp;X-Amz-SignedHeaders=host&amp;actor_id=84925708&amp;key_id=0&amp;repo_id=113965016&amp;response-content-disposition=attachment%3B%20filename%3DPicGo-Setup-2.3.0-beta.8-x64.exe&amp;response-content-type=application%2Foctet-stream</a></p><h2 id="VSCode"><a href="#VSCode" class="headerlink" title="ＶＳＣｏｄｅ"></a>ＶＳＣｏｄｅ</h2><p><a href="https://az764295.vo.msecnd.net/stable/e7d7e9a9348e6a8cc8c03f877d39cb72e5dfb1ff/VSCodeUserSetup-x64-1.60.0.exe">https://az764295.vo.msecnd.net/stable/e7d7e9a9348e6a8cc8c03f877d39cb72e5dfb1ff/VSCodeUserSetup-x64-1.60.0.exe</a></p><h2 id="万兴PDF破解版可免费转换各种文件"><a href="#万兴PDF破解版可免费转换各种文件" class="headerlink" title="万兴PDF破解版可免费转换各种文件"></a>万兴PDF破解版可免费转换各种文件</h2><p>链接：<a href="https://pan.baidu.com/s/1DeuXZabHEa2fzO5uViJ_xg">https://pan.baidu.com/s/1DeuXZabHEa2fzO5uViJ_xg</a><br>提取码：1234</p><h2 id="Offic破解版，可安装任意的文件"><a href="#Offic破解版，可安装任意的文件" class="headerlink" title="Ｏｆｆｉｃ破解版，可安装任意的文件"></a>Ｏｆｆｉｃ破解版，可安装任意的文件</h2><p>链接：<a href="https://pan.baidu.com/s/1_JbUy3teCUDlwC5iRgWwsw">https://pan.baidu.com/s/1_JbUy3teCUDlwC5iRgWwsw</a><br>提取码：1234</p>]]></content>
      
      
      <categories>
          
          <category> 开发环境篇 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> STM32CubeMX </tag>
            
            <tag> keil </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git使用</title>
      <link href="posts/git.html"/>
      <url>posts/git.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Git"><a href="#Git" class="headerlink" title="Git"></a>Git</h1><h2 id="git简介"><a href="#git简介" class="headerlink" title="git简介"></a>git简介</h2><p>Git有三大区（工作-Untracked、暂存-Unstaged、版本-Uncommited）</p><h2 id="1-版本控制"><a href="#1-版本控制" class="headerlink" title="1.版本控制"></a>1.版本控制</h2><h3 id="本地版本控制"><a href="#本地版本控制" class="headerlink" title="本地版本控制"></a>本地版本控制</h3><p>个人使用本地存储</p><h3 id="集中版本控制"><a href="#集中版本控制" class="headerlink" title="集中版本控制"></a>集中版本控制</h3><p>存储到服务器中，使用完上传到服务器中，需要时从服务器下载，有服务器奔溃风险</p><h3 id="分布式版本控制"><a href="#分布式版本控制" class="headerlink" title="分布式版本控制"></a>分布式版本控制</h3><p>每个人拥有全部代码，可以存储在本地，有网时上传到服务器中</p><h2 id="2-git和SVN的区别"><a href="#2-git和SVN的区别" class="headerlink" title="2.git和SVN的区别"></a>2.git和SVN的区别</h2><p>SVN是集中式版本控制系统，版本库集中放在服务器中，工作时从服务器更新到最新版本，完成工作后上传到服务器中，必须联网，对网络带宽要求高</p><p>git是分布式版本控制系统，没有中央服务器，每个人的电脑就是一个完整的版本库，工作时不需联网，协同时，两人互相把修改的部分推送给对方，就可以看到对方的修改。可以看到对方修改了那些代码和文件</p><h2 id="3-git命令"><a href="#3-git命令" class="headerlink" title="3.git命令"></a>3.git命令</h2><p>1.cd ..    回到文件上一级</p><p>2.cd xx    到xx文件夹中</p><p>3.pwd    显示当前目录</p><p>4.clear    清屏</p><p>5、ls    列出当前文件夹中的文件</p><p>6、touch index.js    新建一个index.js文件</p><p>7、rm index.js    移除一个index.js文件</p><p>8、mkdir test    新建一个test文件夹</p><p>9、rm -r test    删除掉test文件夹</p><p>10、mv index.html test    把index.html文件移动到test文件夹中（在命令行中的文件）</p><p>11、reset    重新初始化终端/清屏</p><p>12、history    查看命令历史</p><p>13、help    帮助</p><p>14、exit    退出</p><p>15、#    注释</p><h2 id="4、Git配置"><a href="#4、Git配置" class="headerlink" title="4、Git配置"></a>4、Git配置</h2><p>1、git config –global –list    查看配置的用户名和邮箱</p><p>2、git config –global user.name “xx”    设置用户名</p><p>3、gitconfig –global user.email “xx”    设置用户邮箱</p><h2 id="5、工作原理"><a href="#5、工作原理" class="headerlink" title="5、工作原理"></a>5、工作原理</h2><ol><li><p>git本地有三个工作区，工作目录（working Directory)、暂存区（Stage/index）、资源库（Repository或git Directiory），加上远程的git仓库（Remote Directory）</p><p>​                            </p><table><thead><tr><th align="center">git push（上传到服务）</th><th align="center">Remote Directory（远程仓库）</th><th align="center"></th></tr></thead><tbody><tr><td align="center">git commit（提交修改）</td><td align="center">History（本地git仓库）</td><td align="center">git pull（从服务器下拉代码）</td></tr><tr><td align="center">git add files（添加文件）</td><td align="center">Stage（index）（暂存区）</td><td align="center">git reset（上一个版本）</td></tr><tr><td align="center"></td><td align="center">Working Directory（本地文件）</td><td align="center">git checkout（切换本地分支）</td></tr></tbody></table><p>​            </p><p>​                                        <img src="file:///F:\QQ\2094668015\Image\Group2\PX\J8\PXJ8XDLZ[`OMJSO@7]J_%[N.jpg" alt="img"></p><p>​                                            </p><p>​    git clone 网址，克隆网址东西</p></li></ol><h2 id="6、git文件操作"><a href="#6、git文件操作" class="headerlink" title="6、git文件操作"></a>6、git文件操作</h2><p><img src="C:\Users\86191\AppData\Roaming\Typora\typora-user-images\image-20210818150923660.png" alt="image-20210818150923660"></p><h2 id="7、git的基本操作"><a href="#7、git的基本操作" class="headerlink" title="7、git的基本操作"></a>7、git的基本操作</h2><p>1、git add .    添加所有文件提交到暂存区</p><p>2、git status    查看所有文件的状态</p><p>3、git commit -m “new file hello.txt”    提交暂存区的文件到本地仓库    -m “xx”提交信息</p><p>4、忽略文件</p><p>​    #.txt    #忽略所有的.txt文件，.txt结尾的文件不会上传</p><p>​    ！lib.txt    #但lib.txt文件除外</p><p>​    /temp    #仅忽略项目根目录下的TODO文件，不包括其他目录temp</p><p>​    build/    #忽略build/目录下的所有文件    （/在前面往上忽略，在后面往下忽略）</p><p>​    doc/*.txt    #会忽略doc/notes.txt,但不包括doc/server/arch.txt</p><h2 id="8、个人操作"><a href="#8、个人操作" class="headerlink" title="8、个人操作"></a>8、个人操作</h2><ol><li>git init    初始化仓库</li><li>git clone 网址    克隆网址上的仓库代码    无法克隆时去控制面板的凭据管理器的Windows凭据中找到其用户名和密码修改</li><li>git config –global –list    查看配置的用户名和邮箱</li><li>git config –global user.name “xx”    设置用户名</li><li>gitconfig –global user.email “xx”    设置用户邮箱</li><li>CD xx    进入克隆下来的文件中</li><li>touch test.txt    新建test.txt文件            rm test.txt    移除一个test.txt文件</li><li>mkdir test    新建一个test文件夹        rm -r test    删除掉test文件夹</li><li>git add test.txt    添加test.txt文件到暂存区</li><li>mv index.html test    把index.html文件移动到test文件夹中（在命令行中的文件）</li><li>reset    重新初始化终端/清屏</li><li>history    查看命令历史</li><li>git commit -m “new test.txt”    多次git add后，提交形成记录，“new test.txt”为提交日志</li><li>git status    查看未提交的文件</li><li>git branch -a    查看所有分支，本地及远程分支</li><li>git checkout -b xxx    以当前分支为基础新建立本地分支xxx</li><li>git checkout -b xxx origin/xxx    以远程分支xxx为基础新建立本地分支xxx，本地分支名和远程分支名一致，不然推送不到远程服务器</li><li>git checkout xxx    切换到本地其他分支，切换前要提交当前分支点改动</li><li>git branch -D xxx    强制删除本地分支</li><li>git push origin –delete xxx    删除远程服务器分支</li><li>git pull origin xxx    从服务器分支更新代码到本地</li><li>git push origin xxx    将数据上推到服务器分支中，上推前先将本地代码更新到最新版本</li><li>git tag xx    建立本地标签</li><li>git tag     查看本地所有标签</li><li>git push origin –tags    把本地的所有文档推送到远程服务器</li><li>git fetch    从远程服务器更新代码到本地，但不自动合并，执行后可以更新分支和tag</li><li>git merge xxx    把本地分支xxx合并到当前分支</li><li>echo “xxxxx” &gt;test.txt    在test.txt文件中写入数据xxxx</li><li>修改git branch -a中显示出了的head指向-git remote set-head origin feature可将head指向feature</li></ol><h4 id="列出本地所有分支："><a href="#列出本地所有分支：" class="headerlink" title="列出本地所有分支："></a>列出本地所有分支：</h4><p>命令：git branch</p><h4 id="创建一个新分支："><a href="#创建一个新分支：" class="headerlink" title="创建一个新分支："></a>创建一个新分支：</h4><p>命令：git branch 分支名称</p><h4 id="删除指定本地分支："><a href="#删除指定本地分支：" class="headerlink" title="删除指定本地分支："></a>删除指定本地分支：</h4><p>命令：git branch -d 删除的分支名称    -D为强制删除，-d为正常操作情况下的删除。</p><h2 id="命令大全"><a href="#命令大全" class="headerlink" title="命令大全"></a>命令大全</h2><p>ls -a    查看目录中的文件夹（蓝色）和文件（白色）</p><p>git add &lt;文件名&gt;    将文件提交到暂存区</p><p>git branch -a    查看本地及远程分支</p><p>git branch -l    查看本地分支</p><p>git branch -r    查看远程所有分支</p><p>git checkout -b dev    建立一个新的本地分支dev</p><p>git checkout dev    切换到本地dev</p><p>git checkout -d master dev    删除本地库dev</p><p>git checkout –track origin/dev    切换到远程dev分支</p><p>git clone 网址    克隆网址上的仓库代码    无法克隆时去控制面板的凭据管理器的Windows凭据中找到其用户名和密码修改</p><p>git commit -m “提交信息”    将暂存区的文件提交到本地仓库</p><p>git diff branchname filepath    当前分支的文件与branchname分支的文件进行比较</p><p>git diff commitld filepath    与某次提交进行比较</p><p>git diff filepath    工作区与暂存区比较</p><p>git diff HEAD filepath 工作区与HEAD（当前工作分支）比较</p><p>git fetch    从远程获取最新版本到本地不会自动merge</p><p>git log    查看git commit的日志，推出git log按下q即可</p><p>git ls-files    显示出暂存区和工作区内的文件</p><p>git merge origin/dev    将分支dev和当前分支合并g’i’tte’ch</p><p>git pull    本地与服务器端同步</p><p>git push origin master    将本地分支推送到服务器master分支上</p><p>gti rm –cache 文件名    仅仅删除暂存区里的文件</p><p>git rm -f 文件名    删除暂存区和工作区的文件</p><p>git reset –soft 版本库ID    撤销已提交的版本库，不会修改暂存区和工作区</p><p>git reset –mixed 版本库ID    撤销已提交的版本库和暂存区不会修改工作区</p><p>git reset hard 版本库ID    彻底将工作区、暂存区和版本库记录恢复到指定的版本库</p><p>git status    查看当前状态</p>]]></content>
      
      
      <categories>
          
          <category> 学习篇 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>四线模拟IIC点亮屏幕</title>
      <link href="posts/stm32001.html"/>
      <url>posts/stm32001.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>主要是运用stm32F103RBT6 中的模拟IIC点亮四线的OLED屏</p><ul><li><h3 id="先不写上链接"><a href="#先不写上链接" class="headerlink" title="先不写上链接"></a>先不写上链接</h3></li></ul><p>链接：<a href="https://pan.baidu.com/s/1ebrh6OHc7GkQpjKQb7PRlg">https://pan.baidu.com/s/1ebrh6OHc7GkQpjKQb7PRlg</a><br>提取码：1234</p><p>测试一下PicGo图床</p><p><img src="https://i.loli.net/2021/09/02/qrnOW3IYDPUZ7iQ.png" alt="image-20210902234022748"></p>]]></content>
      
      
      <categories>
          
          <category> 学习篇 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> STM32 </tag>
            
            <tag> STM32CubeMX </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo之渲染绕过</title>
      <link href="posts/17fd92ae.html"/>
      <url>posts/17fd92ae.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="0x001-Hexo-渲染"><a href="#0x001-Hexo-渲染" class="headerlink" title="0x001 Hexo 渲染"></a>0x001 Hexo 渲染</h3><p>  在Hexo部署时会默认渲染source下的所有html页面，但有时候想在Hexo博客上单独自定义html页面或README.md时，却不希望被Hexo渲染。因此对某个文件或者目录进行排除渲染是非常必要的。</p><h3 id="0x002-方法一：font-matter"><a href="#0x002-方法一：font-matter" class="headerlink" title="0x002 方法一：font matter"></a>0x002 方法一：font matter</h3><p><code>Hexo</code>新建网站页面，然后将你的代码直接写入 <code>index.md</code> 中</p><p>在 <code>Front matter</code> 中添加 <code>layout: false</code>，此方法适用于单一的纯<code>HTML</code><br><code>CSS</code> 页面。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">---title: toolsdate: <span class="token number">2020</span>-04-28 00:00:00type: <span class="token string">"tools"</span>layout: <span class="token boolean">false</span>---<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="0x003-方法二：skip-render"><a href="#0x003-方法二：skip-render" class="headerlink" title="0x003 方法二：skip render"></a>0x003 方法二：skip render</h3><p>在博客根目录下的 <code>_config.yml</code>，找到 <code>skip_render</code>，大概在32行左右，写入你想要的跳过渲染的路径，注意缩进和空格。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 指定目录跳过hexo渲染</span>skip_render:  - <span class="token string">'tools/*'</span>  - <span class="token string">'tools/**'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>注释：<code>tools/*</code> 表示在目录 <code>source/fireworks</code> 下的文件全部跳过渲染，<code>tools/**</code> 表示在博客根目录 <code>source/tools/</code> 文件夹下的文件全部跳过渲染（例如页面的 js、css 在另一个文件夹中）。</p></blockquote><h3 id="0x004-案例：webstack-导航"><a href="#0x004-案例：webstack-导航" class="headerlink" title="0x004 案例：webstack 导航"></a>0x004 案例：webstack 导航</h3><p><code>webstack</code>是一个纯静态的网址导航网站，内容均由<code>viggo</code>收集并整理。项目基于<code>bootstrap</code>前端框架开发。</p><p><img src="https://camo.githubusercontent.com/41111c4c1d9922982f380566e6a2f8415204c52c/687474703a2f2f7777772e776562737461636b2e63632f6173736574732f696d616765732f707265766965772e676966" alt="image"></p><ul><li>Github：<a href="https://github.com/WebStackPage/WebStackPage.github.io">https://github.com/WebStackPage/WebStackPage.github.io</a></li></ul><p>在博客根目录 <code>source/</code>下新建<code>tools</code>，然后新建<code>index.html</code>,将<code>webstack</code>网页源码全选复制粘贴到里面。</p><ul><li>本站的webstack源码：<a href="view-source:http://luckyzmj.cn/tools/">view-source:http://luckyzmj.cn/tools/</a></li></ul><blockquote><p>注意：将源码里的部分信息以及跳转链接按照你真实个人博客的环境进行修改。</p></blockquote><p>然后打开博客根目录下配置文件<code>_config.yml</code>，找到<code>skip_render</code>，做如下修改：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">skip_render:  - <span class="token string">'tools/*'</span>  - <span class="token string">'tools/**'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>最后执行<code>hexo clean</code>和<code>hexo s -g </code>本地预览，检查无误后<code>hexo g -d</code>部署到服务器上即可。</p><h3 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h3><ul><li><a href="https://xiabor.com/2020/04/21/hexo3/#%E5%A6%82%E4%BD%95%E8%B7%B3%E8%BF%87hexo%E7%9A%84%E6%B8%B2%E6%9F%93">https://xiabor.com/2020/04/21/hexo3/#%E5%A6%82%E4%BD%95%E8%B7%B3%E8%BF%87hexo%E7%9A%84%E6%B8%B2%E6%9F%93</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 博客篇 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> 渲染绕过 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PicGo+GitHub 图床搭建</title>
      <link href="posts/7a46f93c.html"/>
      <url>posts/7a46f93c.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>用GitHub搭建图床，在很久之前我就有了解，但由于市面上有挺多免费的图床，比如我之前一直在用的 路过图床，所以一直懒得动手搭建GitHub图床。一直到前两天我在完善博客的相册时，发现 路过图床 免费版的有这么多限制，比如：每小时限制上传50张图片，每天限制上传100张图片，而且免费版用户的存储容量貌似不过300M，这才意识到有一个自己的GitHub图床是多么重要。</p><h3 id="0x001-PicGO-介绍"><a href="#0x001-PicGO-介绍" class="headerlink" title="0x001 PicGO 介绍"></a>0x001 PicGO 介绍</h3><p>PicGo是一款图片上传工具，目前支持 SM.MS图床、腾讯云COS、GitHub图床、七牛图床、Imgur图床、阿里云OSS、又拍云图床，未来将支持更多图床。</p><p>在支持的这些图床中，SM.MS和Imgur有免费版和收费版，免费版的肯定有很多的使用限制，比如每小时限制上传次数，限制用户的上传容量等等；腾讯云COS、阿里云、有拍云都是要收费使用的；七牛云貌似前期使用免费，后期又要收费才能使用，就剩下的GitHub才是免费且最可靠的。</p><p>PicGo源项目GitHub地址已给出，但是去GitHub下载速度非常慢，这里额外提供一个蓝奏云的快速下载地址。</p><ul><li>GitHub地址：<a href="https://github.com/Molunerfinn/PicGo">https://github.com/Molunerfinn/PicGo</a></li><li>蓝奏云地址：<a href="https://luckyzmj.lanzous.com/id3e0id">https://luckyzmj.lanzous.com/id3e0id</a></li></ul><h3 id="0x002-GitHub-图床"><a href="#0x002-GitHub-图床" class="headerlink" title="0x002 GitHub 图床"></a>0x002 GitHub 图床</h3><h4 id="1-创建GitHub图床仓库"><a href="#1-创建GitHub图床仓库" class="headerlink" title="1. 创建GitHub图床仓库"></a>1. 创建GitHub图床仓库</h4><p>首先需要有一个登录GitHub的账号，没有的话去<a href="https://github.com/">GitHub官网</a>注册一个</p><p>创建一个新的图床仓库，点击右上角的New repository</p><p><img src="https://cdn.jsdelivr.net/gh/LuckyZmj/imgbed@master/posts/20200529155833.png"></p><p>填写如下配置信息，然后Create创建仓库</p><p><img src="https://cdn.jsdelivr.net/gh/LuckyZmj/imgbed@master/posts/20200529160010.png"></p><h4 id="2-获取GitHub-token值"><a href="#2-获取GitHub-token值" class="headerlink" title="2. 获取GitHub token值"></a>2. 获取GitHub token值</h4><p>点击右上的头像，选择设置Setting</p><p><img src="https://cdn.jsdelivr.net/gh/LuckyZmj/imgbed@master/posts/20200529160727.png"></p><p>点击选择Developer settings </p><p><img src="https://cdn.jsdelivr.net/gh/LuckyZmj/imgbed@master/posts/20200529160939.png"></p><p>点击 Generate New token</p><p><img src="https://cdn.jsdelivr.net/gh/LuckyZmj/imgbed@master/posts/20200529161241.png"></p><p>填写如下配置信息，只要勾选repo选项即可，然后页面拉到底部点击Generate token 即可</p><p><img src="https://cdn.jsdelivr.net/gh/LuckyZmj/imgbed@master/posts/20200529161716.png"></p><p>此时会跳转到带有token的页面，将token值复制记录下来，之后用PicGo绑定GitHub图床时会利用到</p><p><img src="https://cdn.jsdelivr.net/gh/LuckyZmj/imgbed@master/posts/20200529162127.png"></p><h3 id="0x003-PicGo-配置"><a href="#0x003-PicGo-配置" class="headerlink" title="0x003 PicGo 配置"></a>0x003 PicGo 配置</h3><h4 id="1-绑定GitHub图床"><a href="#1-绑定GitHub图床" class="headerlink" title="1. 绑定GitHub图床"></a>1. 绑定GitHub图床</h4><p>首先下载安装好PicGo软件，然后在右列表找到GitHub图床配置</p><p><img src="https://cdn.jsdelivr.net/gh/LuckyZmj/imgbed@master/posts/20200529163130.png"></p><p><strong>1. 设定仓库名(必填)：</strong> </p><p>按照“GitHub账户名/仓库名的格式填写”，比如我的是：Luckyzmj/imgbed</p><p><strong>2. 设定分支名(必填)：</strong> </p><p>仓库分支名填写”master”或者”main”，视情况而定。因为GitHub 官方表示,从2020年10月1日起,在该平台上创建的所有新的源代码仓库将默认被命名为”main”,而不是原先的”master”。</p><p><strong>3. 设定Token(必填)：</strong> </p><p>将之前步骤的Token值复制粘贴到这里</p><p><strong>4. 指定存储路径：</strong> </p><p>这个选项可以为空，如果想将图片上传到仓库的指定目录下，可以填写目录名加/，比如我的imgbed仓库下有个posts文件夹，需设置为 posts/</p><p><strong>5. 设定自定义域名：</strong> </p><p>这里统一用jsdelivr的CDN加速域名，在上传图片后成功后，PicGo会将“自定义域名+上传的图片名”生成的访问链接</p><pre class="line-numbers language-none"><code class="language-none">自定义域名格式：https://cdn.jsdelivr.net/gh/GitHub账户名/仓库名以我的格式为例：https://cdn.jsdelivr.net/gh/Luckyzmj/imgbed<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>配置完全部信息后，点击 设为默认图床，最后点击确定即可</p><h4 id="2-上传图片到图床"><a href="#2-上传图片到图床" class="headerlink" title="2. 上传图片到图床"></a>2. 上传图片到图床</h4><p>在上传区上传图片，可支持本地图片上传(可多选图片)、剪贴板上传、URL上传等三种方式。上传图片成功后，选择你想要生成的图片链接格式</p><p><img src="https://cdn.jsdelivr.net/gh/LuckyZmj/imgbed@master/posts/20200529170555.png"></p><p>在图片区，可以看到成功上传的图片，选择相应的图片进行操作即可</p><p><img src="https://cdn.jsdelivr.net/gh/LuckyZmj/imgbed@master/posts/20200529170831.png"></p><h4 id="3-PicGo-注意事项"><a href="#3-PicGo-注意事项" class="headerlink" title="3. PicGo 注意事项"></a>3. PicGo 注意事项</h4><p>如果配置完PicGo后却上传图片失败，可以参考以下方法：</p><ol><li>检查自定义域名是否正确</li><li>仓库名不要有空格</li><li>图片名字不要带有特殊符号，如：%、+、*、空格等</li><li>建议开启时间戳重命名，防止图片名字重复</li><li>上传图片间歇太短，需在PicGo设置中关闭Server选项</li><li>PicGo应用不稳定因素，需重启应用</li></ol><h3 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h3><ul><li><a href="https://blog.csdn.net/sunhwee/article/details/100109956">https://blog.csdn.net/sunhwee/article/details/100109956</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 博客篇 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PicGo </tag>
            
            <tag> GitHub图床 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>阿里云服务器部署Hexo博客</title>
      <link href="posts/19d2a4e6.html"/>
      <url>posts/19d2a4e6.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><hr><p>  相信大部分人使用Hexo搭建个人博客都会部署到一些免费的代码托管平台上，但这些免费的平台总是差强人意，比如国外的GitHub平台虽然完全免费，但在国内访问加载速度非常慢，又或者是国内的码云平台免费版有许多功能被阉割掉了，比如不能自定义域名，不能每次自动刷新提交的代码，需要到码云平台上手动刷新，如此一来非常繁琐。</p><p>  为了有效解决上诉的一些问题，有条件的话，不妨在自己的云服务器上搭建Hexo博客。</p><h2 id="效果演示"><a href="#效果演示" class="headerlink" title="效果演示"></a>效果演示</h2><hr><p>这是Hexo博客部署到GitHub上的网站测速效果</p><p><img src="https://s1.ax1x.com/2020/03/12/8mhkv9.png" alt="演示demo1"></p><p>这是Hexo博客部署到阿里云服务器后的网站测速效果</p><p><img src="https://s1.ax1x.com/2020/03/12/8mWYQA.png" alt="演示demo2"></p><h2 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h2><hr><ul><li>本地环境：Windows 10 </li><li>云服务器环境：阿里云ECS（CentOS7.x）</li></ul><h2 id="开始部署"><a href="#开始部署" class="headerlink" title="开始部署"></a>开始部署</h2><hr><h3 id="本地环境搭建"><a href="#本地环境搭建" class="headerlink" title="本地环境搭建"></a>本地环境搭建</h3><p><strong>1.安装Git</strong></p><p>到git官网上下载.exe文件,Download git,安装选项还是全部默认，最后一步添加路径时选择<code>Use Git from the Windows Command Prompt</code>。</p><ul><li>Git<a href="https://git-scm.com/download">下载地址</a></li><li>Git<a href="https://www.liaoxuefeng.com/wiki/896043488029600">教程</a></li></ul><p><strong>2.安装Nodejs</strong></p><p>到<a href="http://nodejs.cn/download/">Node.js官网</a>下载<code>.exe</code>文件，安装选项全部默认。安装好之后，按<code>Win+R</code>打开cmd命令提示符，输入<code>node -v</code>和<code>npm -v</code>，若出现版本号，则说明安装成功。</p><p>使用npm阿里的国内镜像进行加速下载</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> config <span class="token builtin class-name">set</span> registry https://registry.npm.taobao.org<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>4.安装Hexo</strong></p><p>先创建一个文件夹<code>MyBlog</code>，用来存放自己的博客文件，然后<code>cd</code>到这个文件夹下（或者在这个文件夹下直接右键<code>git bash here</code>打开）。</p><p>定位到该目录下，输入<code>npm install -g hexo-cli</code>安装<code>Hexo</code>。可能会有几个报错，不用理会。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> -g hexo-cli<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>安装完后输入<code>hexo -v</code>,若出现版本号则，说明安装成功。</p><p>接下来初始化一下<code>hexo</code>,即初始化我们的博客，输入<code>hexo init</code>初始化文件夹</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hexo init MyBlog<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>新建完成后，指定文件夹<code>MyBlog</code>目录下有：</p><ul><li><code>node_modules</code>: 依赖包</li><li><code>public</code>：存放生成的页面</li><li><code>scaffolds</code>：生成文章的一些模板</li><li><code>source</code>：用来存放你的文章</li><li><code>themes</code>：主题**</li><li><code>_config.yml</code>: 博客的配置文件**</li></ul><p>输入<code>hexo g</code>生成静态网页，然后输入<code>hexo s</code>打开本地服务器预览</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hexo ghexo s<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="https://s1.ax1x.com/2020/03/12/8VdlGD.png" alt="Hexo"></p><h3 id="生成ssh公钥"><a href="#生成ssh公钥" class="headerlink" title="生成ssh公钥"></a>生成ssh公钥</h3><p>在本地桌面点击右键<code>Git Bash Here</code>打开Git终端，执行如下命令`,一路回车</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">ssh-keygen -t rsa<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这个时候它会告诉你已经生成了<code>.ssh</code>的文件夹。在<code>git bash</code>中输入</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">cat</span> ~/.ssh/id_rsa.pub<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>输出的内容就是公钥信息了</p><h3 id="阿里云服务器环境搭建"><a href="#阿里云服务器环境搭建" class="headerlink" title="阿里云服务器环境搭建"></a>阿里云服务器环境搭建</h3><p>安装<code>Git</code></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">yum <span class="token function">install</span> <span class="token function">git</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>创建<code>Git</code>账户</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">adduser <span class="token function">git</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>添加账户权限</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">chmod</span> <span class="token number">740</span> /etc/sudoers<span class="token function">vim</span> /etc/sudoers<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>找到</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">## Allow root to run any commands anywhere</span>root    <span class="token assign-left variable">ALL</span><span class="token operator">=</span><span class="token punctuation">(</span>ALL<span class="token punctuation">)</span>     ALL<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>添加以下内容</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span>   <span class="token assign-left variable">ALL</span><span class="token operator">=</span><span class="token punctuation">(</span>ALL<span class="token punctuation">)</span>     ALL<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>保存退出并改回权限</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">chmod</span> <span class="token number">400</span> /etc/sudoers<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>设置<code>git</code>账户密码</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">passwd</span> <span class="token function">git</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>切换至<code>git</code>用户，创建 <code>~/.ssh</code> 文件夹和 <code>~/.ssh/authorized_keys</code> 文件，并赋予相应的权限</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">su</span> <span class="token function">git</span><span class="token function">mkdir</span> ~/.ssh<span class="token function">vim</span> ~/.ssh/authorized_keys<span class="token comment"># 然后将win10中生成的id_rsa.pub文件中的公钥复制到authorized_keys</span><span class="token function">chmod</span> <span class="token number">600</span> /home/git/.ssh/authorized_keys<span class="token function">chmod</span> <span class="token number">700</span> /home/git/.ssh<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在本地<code>Git</code>终端中测试是否能免密登录<code>git</code>，其中<code>SERVER</code>为填写自己的云主机<code>IP</code>，执行输入<code>yes</code>后不用密码就说明好了</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">ssh</span> -v git@SERVER<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>创建目录</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#repo作为为Git仓库目录</span><span class="token function">mkdir</span> /var/repo<span class="token function">chown</span> -R git:git /var/repo<span class="token function">chmod</span> -R <span class="token number">755</span> /var/repo<span class="token comment">#hexo作为网站根目录</span><span class="token function">mkdir</span> /var/www/hexo<span class="token function">chown</span> -R git:git /var/www/hexo<span class="token function">chmod</span> -R <span class="token number">755</span> /var/www/hexo<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后创建一个裸的 <code>Git</code> 仓库</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> var/repo<span class="token function">git</span> init --bare hexoBlog.git<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>创建一个新的 <code>Git</code> 钩子，用于自动部署 在 <code>/var/repo/hexoBlog.git</code> 下，有一个自动生成的 <code>hooks</code> 文件夹。我们需要在里边新建一个新的钩子文件 <code>post-receive</code>。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">vim</span> /var/repo/hexoBlog.git/hooks/post-receive<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>按 <code>i</code> 键进入文件的编辑模式，在该文件中添加两行代码（将下边的代码粘贴进去)，指定 <code>Git</code> 的工作树（源代码）和 <code>Git</code> 目录（配置文件等）</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token shebang important">#!/bin/bash</span><span class="token function">git</span> --work-tree<span class="token operator">=</span>/var/www/hexo --git-dir<span class="token operator">=</span>/var/repo/hexoBlog.git checkout -f<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>然后，按 <code>Esc</code> 键退出编辑模式，输入”<code>:wq</code>” 保存退出。</p><p>修改文件权限，使得其可执行</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">chown</span> -R git:git /var/repo/hexoBlog.git/hooks/post-receive<span class="token function">chmod</span> +x /var/repo/hexoBlog.git/hooks/post-receive<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>到此为止 <code>Git</code> 仓库就搭建完成了。</p><h3 id="阿里云服务器配置Nginx"><a href="#阿里云服务器配置Nginx" class="headerlink" title="阿里云服务器配置Nginx"></a>阿里云服务器配置Nginx</h3><p>用宝塔面板来一键部署Nginx <code>Linux</code>面板6.0安装命令(暂时仅兼容<code>Centos7.x</code>，其它系统版本请安装5.9稳定版)：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">yum <span class="token function">install</span> -y <span class="token function">wget</span> <span class="token operator">&amp;&amp;</span> <span class="token function">wget</span> -O install.sh http://download.bt.cn/install/install_6.0.sh <span class="token operator">&amp;&amp;</span> <span class="token function">bash</span> install.sh<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><code>Linux</code>面板6.0升级专业版</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">curl</span> http://download.bt.cn/install/update6.sh<span class="token operator">|</span><span class="token function">bash</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>安装完成后会显示面板后台地址·账号·密码。打开面板后台地址登陆面板，选择<code>Nginx</code>的部署方案，静静等待部署。</p><p>部署完成，点击网站-添加站点-输入域名(没有域名的输入自己的<code>IP</code>地址)-底部的<code>PHP</code>版本选择”纯静态”-提交。 </p><p>网站创建完成后点击设置-配置文件</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">server<span class="token punctuation">{</span>    listen <span class="token number">80</span><span class="token punctuation">;</span>  <span class="token comment"># server_name 填写自己的域名</span>    server_name luckyzmj.cn blog.luckyzmj.cn<span class="token punctuation">;</span>    index index.php index.html index.htm default.php default.htm default.html<span class="token punctuation">;</span>  <span class="token comment"># 这里root填写自己的网站根目录，修改为/var/www/hexo</span>    root /var/www/hexo<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>-保存</p><p>点击设置-网站目录，修改为<code>/var/www/hexo</code> ，保存</p><p>重启宝塔面板服务</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">service</span> bt restart<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="本地Hexo部署到阿里云服务器"><a href="#本地Hexo部署到阿里云服务器" class="headerlink" title="本地Hexo部署到阿里云服务器"></a>本地Hexo部署到阿里云服务器</h3><p>进入到本地<code>Hexo</code>博客的文件夹<code>MyBlog</code>,右键点击<code>Git Bash Here</code>，输入命令</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#定义邮箱(更换为你的邮箱地址就行)</span><span class="token function">git</span> config --global user.email <span class="token string">"you@example.com"</span><span class="token comment">#定义名称(更换自定义一个名称就行)</span><span class="token function">git</span> config --global user.name <span class="token string">"Your Name"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>配置<code>_config.yml</code>,完成自动化部署 </p><p>打开本地<code>Hexo</code>博客的文件夹<code>MyBlog</code>文件夹下的<code>_config.yml</code>, 找到<code>deploy</code></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">deploy:  type: <span class="token function">git</span>  <span class="token comment">#server改为你的服务IP地址或解析后的域名</span>  <span class="token comment">#例如我改为repo: git@luckyzmj.cn:/var/repo/blog.git</span>  repo: git@server:/var/repo/blog.git  branch: master<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>保存后，即可测试部署</p><p>再进入到本地<code>Hexo</code>博客的文件夹<code>MyBlog</code>,右键点击<code>Git Bash Here</code>，输入命令</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hexo clean hexo g -d<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>不报错说明完成，打开浏览器输入你的域名或<code>ip</code>地址就可以看到你部署的<code>Hexo</code>博客了。 </p><p>到此为止，我们已经成功部完成，并且访问自己的服务器端比访问Github快多了。</p><blockquote><h3 id="小贴士"><a href="#小贴士" class="headerlink" title="小贴士"></a>小贴士</h3></blockquote><p>在部署过程中，执行 hexo d发现部署老是出错，什么权限不允许之类的，这里我们需要检查我们在上述的<code>git</code>操作部署是否使用了<code>git</code>用户操作，若是没有，需要给相应的目录更改用户组 使用</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">chown</span> -R git:git /var/repo/<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这条命令递归的将<code>repo</code>目录及其子目录用户组设置为<code>git</code>。 同时使用</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">chown</span> -R git:git /var/www/hexo<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这样即可解决此类问题。</p><p>还有一个问题就是绑定域名后不能访问。原因是在国内任何域名只要绑定到国内的服务器主机上都必须去工信部和公安部备案完后才能正常使用。如果是港澳台的服务器或者是国外的服务器则可以不需要备案。</p><h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><ul><li><a href="https://blog.csdn.net/weixin_33907511/article/details/91398208?utm_source=distribute.pc_relevant.none-task">https://blog.csdn.net/weixin_33907511/article/details/91398208?utm_source=distribute.pc_relevant.none-task</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 博客篇 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> 阿里云 </tag>
            
            <tag> 博客 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
